using FBS.Consumer;

namespace Tubumu.Mediasoup
{
    public class ConsumerOptions : ConsumerOptionsBase
    {
        /// <summary>
        /// RTP capabilities of the consuming endpoint.
        /// </summary>
        public RtpCapabilities RtpCapabilities { get; set; }

        /// <summary>
        /// <para>Whether the Consumer must start in paused mode. Default false.</para>
        /// <para>
        /// When creating a video Consumer, it's recommended to set paused to true,
        /// then transmit the Consumer parameters to the consuming endpoint and, once
        /// the consuming endpoint has created its local side Consumer, unpause the
        /// server side Consumer using the resume() method. This is an optimization
        /// to make it possible for the consuming endpoint to render the video as far
        /// as possible. If the server side Consumer was created with paused: false,
        /// mediasoup will immediately request a key frame to the remote Producer and
        /// suych a key frame may reach the consuming endpoint even before it's ready
        /// to consume it, generating “black” video until the device requests a keyframe
        /// by itself.
        /// </para>
        /// </summary>
        public bool Paused { get; set; }

        /// <summary>
        /// The MID for the Consumer. If not specified, a sequentially growing
        /// number will be assigned.
        /// </summary>
        public string? Mid { get; set; }

        /// <summary>
        /// Preferred spatial and temporal layer for simulcast or SVC media sources.
        /// If unset, the highest ones are selected.
        /// </summary>
        public ConsumerLayersT? PreferredLayers { get; set; }

        /**
         * Whether this Consumer should enable RTP retransmissions, storing sent RTP
         * and processing the incoming RTCP NACK from the remote Consumer. If not set
         * it's true by default for video codecs and false for audio codecs. If set
         * to true, NACK will be enabled if both endpoints (mediasoup and the remote
         * Consumer) support NACK for this codec. When it comes to audio codecs, just
         * OPUS supports NACK.
         */
        public bool EnableRtx { get; set; }

        /// <summary>
        /// Whether this Consumer should ignore DTX packets (only valid for Opus codec).
        /// If set, DTX packets are not forwarded to the remote Consumer.
        /// </summary>
        public bool IgnoreDtx { get; set; }

        /// <summary>
        /// Whether this Consumer should consume all RTP streams generated by the
        /// Producer.
        /// </summary>
        public bool Pipe { get; set; }
    }
}
