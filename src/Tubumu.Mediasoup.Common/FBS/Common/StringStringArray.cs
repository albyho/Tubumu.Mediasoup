// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Google.FlatBuffers;

namespace FBS.Common
{
    public struct StringStringArray : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static StringStringArray GetRootAsStringStringArray(ByteBuffer _bb) { return GetRootAsStringStringArray(_bb, new StringStringArray()); }
        public static StringStringArray GetRootAsStringStringArray(ByteBuffer _bb, StringStringArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public StringStringArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Key { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetKeyArray() { return __p.__vector_as_array<byte>(4); }
        public string Values(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
        public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

        public static Offset<FBS.Common.StringStringArray> CreateStringStringArray(FlatBufferBuilder builder,
            StringOffset keyOffset = default(StringOffset),
            VectorOffset valuesOffset = default(VectorOffset))
        {
            builder.StartTable(2);
            StringStringArray.AddValues(builder, valuesOffset);
            StringStringArray.AddKey(builder, keyOffset);
            return StringStringArray.EndStringStringArray(builder);
        }

        public static void StartStringStringArray(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddKey(FlatBufferBuilder builder, StringOffset keyOffset) { builder.AddOffset(0, keyOffset.Value, 0); }
        public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
        public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<FBS.Common.StringStringArray> EndStringStringArray(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // key
            builder.Required(o, 6);  // values
            return new Offset<FBS.Common.StringStringArray>(o);
        }
        public StringStringArrayT UnPack()
        {
            var _o = new StringStringArrayT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(StringStringArrayT _o)
        {
            _o.Key = this.Key;
            _o.Values = new List<string>();
            for(var _j = 0; _j < this.ValuesLength; ++_j)
            { _o.Values.Add(this.Values(_j)); }
        }
        public static Offset<FBS.Common.StringStringArray> Pack(FlatBufferBuilder builder, StringStringArrayT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Common.StringStringArray>);
            var _key = _o.Key == null ? default(StringOffset) : builder.CreateString(_o.Key);
            var _values = default(VectorOffset);
            if(_o.Values != null)
            {
                var __values = new StringOffset[_o.Values.Count];
                for(var _j = 0; _j < __values.Length; ++_j)
                { __values[_j] = builder.CreateString(_o.Values[_j]); }
                _values = CreateValuesVector(builder, __values);
            }
            return CreateStringStringArray(
              builder,
              _key,
              _values);
        }
    }

    public class StringStringArrayT
    {
        [JsonPropertyName("key")]
        public string Key { get; set; }
        [JsonPropertyName("values")]
        public List<string> Values { get; set; }

        public StringStringArrayT()
        {
            this.Key = null;
            this.Values = null;
        }
    }
}
