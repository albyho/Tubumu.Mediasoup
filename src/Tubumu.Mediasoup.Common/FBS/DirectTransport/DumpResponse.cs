// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.DirectTransport
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct DumpResponse : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static DumpResponse GetRootAsDumpResponse(ByteBuffer _bb) { return GetRootAsDumpResponse(_bb, new DumpResponse()); }
        public static DumpResponse GetRootAsDumpResponse(ByteBuffer _bb, DumpResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public DumpResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Transport.Dump? Base { get { int o = __p.__offset(4); return o != 0 ? (FBS.Transport.Dump?)(new FBS.Transport.Dump()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<FBS.DirectTransport.DumpResponse> CreateDumpResponse(FlatBufferBuilder builder,
            Offset<FBS.Transport.Dump> @baseOffset = default(Offset<FBS.Transport.Dump>))
        {
            builder.StartTable(1);
            DumpResponse.AddBase(builder, @baseOffset);
            return DumpResponse.EndDumpResponse(builder);
        }

        public static void StartDumpResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddBase(FlatBufferBuilder builder, Offset<FBS.Transport.Dump> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
        public static Offset<FBS.DirectTransport.DumpResponse> EndDumpResponse(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // base
            return new Offset<FBS.DirectTransport.DumpResponse>(o);
        }
        public DumpResponseT UnPack()
        {
            var _o = new DumpResponseT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(DumpResponseT _o)
        {
            _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
        }
        public static Offset<FBS.DirectTransport.DumpResponse> Pack(FlatBufferBuilder builder, DumpResponseT _o)
        {
            if(_o == null)
                return default(Offset<FBS.DirectTransport.DumpResponse>);
            var _base = _o.Base == null ? default(Offset<FBS.Transport.Dump>) : FBS.Transport.Dump.Pack(builder, _o.Base);
            return CreateDumpResponse(
              builder,
              _base);
        }
    }

    public class DumpResponseT
    {
        public FBS.Transport.DumpT Base { get; set; }

        public DumpResponseT()
        {
            this.Base = null;
        }
    }


    static public class DumpResponseVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyTable(tablePos, 4 /*Base*/, FBS.Transport.DumpVerify.Verify, true)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
