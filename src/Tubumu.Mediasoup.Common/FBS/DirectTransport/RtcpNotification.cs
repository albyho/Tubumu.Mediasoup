// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.DirectTransport
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct RtcpNotification : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static RtcpNotification GetRootAsRtcpNotification(ByteBuffer _bb) { return GetRootAsRtcpNotification(_bb, new RtcpNotification()); }
        public static RtcpNotification GetRootAsRtcpNotification(ByteBuffer _bb, RtcpNotification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public RtcpNotification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public byte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
        public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }

        public static Offset<FBS.DirectTransport.RtcpNotification> CreateRtcpNotification(FlatBufferBuilder builder,
            VectorOffset dataOffset = default(VectorOffset))
        {
            builder.StartTable(1);
            RtcpNotification.AddData(builder, dataOffset);
            return RtcpNotification.EndRtcpNotification(builder);
        }

        public static void StartRtcpNotification(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
        public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for(int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static Offset<FBS.DirectTransport.RtcpNotification> EndRtcpNotification(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // data
            return new Offset<FBS.DirectTransport.RtcpNotification>(o);
        }
        public RtcpNotificationT UnPack()
        {
            var _o = new RtcpNotificationT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(RtcpNotificationT _o)
        {
            _o.Data = new List<byte>();
            for(var _j = 0; _j < this.DataLength; ++_j)
            { _o.Data.Add(this.Data(_j)); }
        }
        public static Offset<FBS.DirectTransport.RtcpNotification> Pack(FlatBufferBuilder builder, RtcpNotificationT _o)
        {
            if(_o == null)
                return default(Offset<FBS.DirectTransport.RtcpNotification>);
            var _data = default(VectorOffset);
            if(_o.Data != null)
            {
                var __data = _o.Data.ToArray();
                _data = CreateDataVector(builder, __data);
            }
            return CreateRtcpNotification(
              builder,
              _data);
        }
    }

    public class RtcpNotificationT
    {
        public List<byte> Data { get; set; }

        public RtcpNotificationT()
        {
            this.Data = null;
        }
    }


    static public class RtcpNotificationVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyVectorOfData(tablePos, 4 /*Data*/, 1 /*byte*/, true)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
