// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.DirectTransport
{
    public struct DirectTransportOptions : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static DirectTransportOptions GetRootAsDirectTransportOptions(ByteBuffer _bb) { return GetRootAsDirectTransportOptions(_bb, new DirectTransportOptions()); }
        public static DirectTransportOptions GetRootAsDirectTransportOptions(ByteBuffer _bb, DirectTransportOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public DirectTransportOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Transport.Options? Base { get { int o = __p.__offset(4); return o != 0 ? (FBS.Transport.Options?)(new FBS.Transport.Options()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<FBS.DirectTransport.DirectTransportOptions> CreateDirectTransportOptions(FlatBufferBuilder builder,
            Offset<FBS.Transport.Options> @baseOffset = default(Offset<FBS.Transport.Options>))
        {
            builder.StartTable(1);
            DirectTransportOptions.AddBase(builder, @baseOffset);
            return DirectTransportOptions.EndDirectTransportOptions(builder);
        }

        public static void StartDirectTransportOptions(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddBase(FlatBufferBuilder builder, Offset<FBS.Transport.Options> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
        public static Offset<FBS.DirectTransport.DirectTransportOptions> EndDirectTransportOptions(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // base
            return new Offset<FBS.DirectTransport.DirectTransportOptions>(o);
        }
        public DirectTransportOptionsT UnPack()
        {
            var _o = new DirectTransportOptionsT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(DirectTransportOptionsT _o)
        {
            _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
        }
        public static Offset<FBS.DirectTransport.DirectTransportOptions> Pack(FlatBufferBuilder builder, DirectTransportOptionsT _o)
        {
            if(_o == null)
                return default(Offset<FBS.DirectTransport.DirectTransportOptions>);
            var _base = _o.Base == null ? default(Offset<FBS.Transport.Options>) : FBS.Transport.Options.Pack(builder, _o.Base);
            return CreateDirectTransportOptions(
              builder,
              _base);
        }
    }
}
