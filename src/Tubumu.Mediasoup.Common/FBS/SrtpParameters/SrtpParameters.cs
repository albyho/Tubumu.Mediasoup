// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.SrtpParameters
{
    public struct SrtpParameters : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static SrtpParameters GetRootAsSrtpParameters(ByteBuffer _bb) { return GetRootAsSrtpParameters(_bb, new SrtpParameters()); }
        public static SrtpParameters GetRootAsSrtpParameters(ByteBuffer _bb, SrtpParameters obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public SrtpParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.SrtpParameters.SrtpCryptoSuite CryptoSuite { get { int o = __p.__offset(4); return o != 0 ? (FBS.SrtpParameters.SrtpCryptoSuite)__p.bb.Get(o + __p.bb_pos) : FBS.SrtpParameters.SrtpCryptoSuite.AEAD_AES_256_GCM; } }
        public string KeyBase64 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBase64Bytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
        public ArraySegment<byte>? GetKeyBase64Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
        public byte[] GetKeyBase64Array() { return __p.__vector_as_array<byte>(6); }

        public static Offset<FBS.SrtpParameters.SrtpParameters> CreateSrtpParameters(FlatBufferBuilder builder,
            FBS.SrtpParameters.SrtpCryptoSuite crypto_suite = FBS.SrtpParameters.SrtpCryptoSuite.AEAD_AES_256_GCM,
            StringOffset key_base64Offset = default(StringOffset))
        {
            builder.StartTable(2);
            SrtpParameters.AddKeyBase64(builder, key_base64Offset);
            SrtpParameters.AddCryptoSuite(builder, crypto_suite);
            return SrtpParameters.EndSrtpParameters(builder);
        }

        public static void StartSrtpParameters(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddCryptoSuite(FlatBufferBuilder builder, FBS.SrtpParameters.SrtpCryptoSuite cryptoSuite) { builder.AddByte(0, (byte)cryptoSuite, 0); }
        public static void AddKeyBase64(FlatBufferBuilder builder, StringOffset keyBase64Offset) { builder.AddOffset(1, keyBase64Offset.Value, 0); }
        public static Offset<FBS.SrtpParameters.SrtpParameters> EndSrtpParameters(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 6);  // key_base64
            return new Offset<FBS.SrtpParameters.SrtpParameters>(o);
        }
        public SrtpParametersT UnPack()
        {
            var _o = new SrtpParametersT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(SrtpParametersT _o)
        {
            _o.CryptoSuite = this.CryptoSuite;
            _o.KeyBase64 = this.KeyBase64;
        }
        public static Offset<FBS.SrtpParameters.SrtpParameters> Pack(FlatBufferBuilder builder, SrtpParametersT _o)
        {
            if(_o == null)
                return default(Offset<FBS.SrtpParameters.SrtpParameters>);
            var _key_base64 = _o.KeyBase64 == null ? default(StringOffset) : builder.CreateString(_o.KeyBase64);
            return CreateSrtpParameters(
              builder,
              _o.CryptoSuite,
              _key_base64);
        }
    }
}
