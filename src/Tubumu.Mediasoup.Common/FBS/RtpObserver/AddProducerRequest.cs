// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FBS.RtpObserver
{

  using System;
  using System.Collections.Generic;
  using Google.FlatBuffers;
  using System.Text.Json.Serialization;

  public struct AddProducerRequest : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
    public static AddProducerRequest GetRootAsAddProducerRequest( ByteBuffer _bb ) { return GetRootAsAddProducerRequest( _bb, new AddProducerRequest() ); }
    public static AddProducerRequest GetRootAsAddProducerRequest( ByteBuffer _bb, AddProducerRequest obj ) { return (obj.__assign( _bb.GetInt( _bb.Position ) + _bb.Position, _bb )); }
    public void __init( int _i, ByteBuffer _bb ) { __p = new Table( _i, _bb ); }
    public AddProducerRequest __assign( int _i, ByteBuffer _bb ) { __init( _i, _bb ); return this; }

    public string ProducerId { get { int o = __p.__offset( 4 ); return o != 0 ? __p.__string( o + __p.bb_pos ) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProducerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
    public ArraySegment<byte>? GetProducerIdBytes() { return __p.__vector_as_arraysegment( 4 ); }
#endif
    public byte[] GetProducerIdArray() { return __p.__vector_as_array<byte>( 4 ); }

    public static Offset<FBS.RtpObserver.AddProducerRequest> CreateAddProducerRequest( FlatBufferBuilder builder,
        StringOffset producer_idOffset = default( StringOffset ) )
    {
      builder.StartTable( 1 );
      AddProducerRequest.AddProducerId( builder, producer_idOffset );
      return AddProducerRequest.EndAddProducerRequest( builder );
    }

    public static void StartAddProducerRequest( FlatBufferBuilder builder ) { builder.StartTable( 1 ); }
    public static void AddProducerId( FlatBufferBuilder builder, StringOffset producerIdOffset ) { builder.AddOffset( 0, producerIdOffset.Value, 0 ); }
    public static Offset<FBS.RtpObserver.AddProducerRequest> EndAddProducerRequest( FlatBufferBuilder builder )
    {
      int o = builder.EndTable();
      builder.Required( o, 4 );  // producer_id
      return new Offset<FBS.RtpObserver.AddProducerRequest>( o );
    }
    public AddProducerRequestT UnPack()
    {
      var _o = new AddProducerRequestT();
      this.UnPackTo( _o );
      return _o;
    }
    public void UnPackTo( AddProducerRequestT _o )
    {
      _o.ProducerId = this.ProducerId;
    }
    public static Offset<FBS.RtpObserver.AddProducerRequest> Pack( FlatBufferBuilder builder, AddProducerRequestT _o )
    {
      if ( _o == null )
        return default( Offset<FBS.RtpObserver.AddProducerRequest> );
      var _producer_id = _o.ProducerId == null ? default( StringOffset ) : builder.CreateString( _o.ProducerId );
      return CreateAddProducerRequest(
        builder,
        _producer_id );
    }
  }

  public class AddProducerRequestT
  {
    [JsonPropertyName( "producer_id" )]
    public string ProducerId { get; set; }

    public AddProducerRequestT()
    {
      this.ProducerId = null;
    }
  }


}
