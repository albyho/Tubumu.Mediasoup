// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;
using Google.FlatBuffers;

namespace FBS.PipeTransport
{
    public struct PipeTransportOptions : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static PipeTransportOptions GetRootAsPipeTransportOptions(ByteBuffer _bb) { return GetRootAsPipeTransportOptions(_bb, new PipeTransportOptions()); }
        public static PipeTransportOptions GetRootAsPipeTransportOptions(ByteBuffer _bb, PipeTransportOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public PipeTransportOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Transport.Options? Base { get { int o = __p.__offset(4); return o != 0 ? (FBS.Transport.Options?)(new FBS.Transport.Options()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.Transport.ListenInfo? ListenInfo { get { int o = __p.__offset(6); return o != 0 ? (FBS.Transport.ListenInfo?)(new FBS.Transport.ListenInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public bool EnableRtx { get { int o = __p.__offset(8); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public bool EnableSrtp { get { int o = __p.__offset(10); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }

        public static Offset<FBS.PipeTransport.PipeTransportOptions> CreatePipeTransportOptions(FlatBufferBuilder builder,
            Offset<FBS.Transport.Options> @baseOffset = default(Offset<FBS.Transport.Options>),
            Offset<FBS.Transport.ListenInfo> listen_infoOffset = default(Offset<FBS.Transport.ListenInfo>),
            bool enable_rtx = false,
            bool enable_srtp = false)
        {
            builder.StartTable(4);
            PipeTransportOptions.AddListenInfo(builder, listen_infoOffset);
            PipeTransportOptions.AddBase(builder, @baseOffset);
            PipeTransportOptions.AddEnableSrtp(builder, enable_srtp);
            PipeTransportOptions.AddEnableRtx(builder, enable_rtx);
            return PipeTransportOptions.EndPipeTransportOptions(builder);
        }

        public static void StartPipeTransportOptions(FlatBufferBuilder builder) { builder.StartTable(4); }
        public static void AddBase(FlatBufferBuilder builder, Offset<FBS.Transport.Options> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
        public static void AddListenInfo(FlatBufferBuilder builder, Offset<FBS.Transport.ListenInfo> listenInfoOffset) { builder.AddOffset(1, listenInfoOffset.Value, 0); }
        public static void AddEnableRtx(FlatBufferBuilder builder, bool enableRtx) { builder.AddBool(2, enableRtx, false); }
        public static void AddEnableSrtp(FlatBufferBuilder builder, bool enableSrtp) { builder.AddBool(3, enableSrtp, false); }
        public static Offset<FBS.PipeTransport.PipeTransportOptions> EndPipeTransportOptions(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // base
            builder.Required(o, 6);  // listen_info
            return new Offset<FBS.PipeTransport.PipeTransportOptions>(o);
        }
        public PipeTransportOptionsT UnPack()
        {
            var _o = new PipeTransportOptionsT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(PipeTransportOptionsT _o)
        {
            _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
            _o.ListenInfo = this.ListenInfo.HasValue ? this.ListenInfo.Value.UnPack() : null;
            _o.EnableRtx = this.EnableRtx;
            _o.EnableSrtp = this.EnableSrtp;
        }
        public static Offset<FBS.PipeTransport.PipeTransportOptions> Pack(FlatBufferBuilder builder, PipeTransportOptionsT _o)
        {
            if(_o == null)
                return default(Offset<FBS.PipeTransport.PipeTransportOptions>);
            var _base = _o.Base == null ? default(Offset<FBS.Transport.Options>) : FBS.Transport.Options.Pack(builder, _o.Base);
            var _listen_info = _o.ListenInfo == null ? default(Offset<FBS.Transport.ListenInfo>) : FBS.Transport.ListenInfo.Pack(builder, _o.ListenInfo);
            return CreatePipeTransportOptions(
              builder,
              _base,
              _listen_info,
              _o.EnableRtx,
              _o.EnableSrtp);
        }
    }
}
