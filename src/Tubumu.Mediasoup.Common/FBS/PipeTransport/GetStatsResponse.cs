// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.PipeTransport
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct GetStatsResponse : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static GetStatsResponse GetRootAsGetStatsResponse(ByteBuffer _bb) { return GetRootAsGetStatsResponse(_bb, new GetStatsResponse()); }
        public static GetStatsResponse GetRootAsGetStatsResponse(ByteBuffer _bb, GetStatsResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public GetStatsResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Transport.Stats? Base { get { int o = __p.__offset(4); return o != 0 ? (FBS.Transport.Stats?)(new FBS.Transport.Stats()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.Transport.Tuple? Tuple { get { int o = __p.__offset(6); return o != 0 ? (FBS.Transport.Tuple?)(new FBS.Transport.Tuple()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<FBS.PipeTransport.GetStatsResponse> CreateGetStatsResponse(FlatBufferBuilder builder,
            Offset<FBS.Transport.Stats> @baseOffset = default(Offset<FBS.Transport.Stats>),
            Offset<FBS.Transport.Tuple> tupleOffset = default(Offset<FBS.Transport.Tuple>))
        {
            builder.StartTable(2);
            GetStatsResponse.AddTuple(builder, tupleOffset);
            GetStatsResponse.AddBase(builder, @baseOffset);
            return GetStatsResponse.EndGetStatsResponse(builder);
        }

        public static void StartGetStatsResponse(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddBase(FlatBufferBuilder builder, Offset<FBS.Transport.Stats> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
        public static void AddTuple(FlatBufferBuilder builder, Offset<FBS.Transport.Tuple> tupleOffset) { builder.AddOffset(1, tupleOffset.Value, 0); }
        public static Offset<FBS.PipeTransport.GetStatsResponse> EndGetStatsResponse(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // base
            builder.Required(o, 6);  // tuple
            return new Offset<FBS.PipeTransport.GetStatsResponse>(o);
        }
        public GetStatsResponseT UnPack()
        {
            var _o = new GetStatsResponseT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(GetStatsResponseT _o)
        {
            _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
            _o.Tuple = this.Tuple.HasValue ? this.Tuple.Value.UnPack() : null;
        }
        public static Offset<FBS.PipeTransport.GetStatsResponse> Pack(FlatBufferBuilder builder, GetStatsResponseT _o)
        {
            if(_o == null)
                return default(Offset<FBS.PipeTransport.GetStatsResponse>);
            var _base = _o.Base == null ? default(Offset<FBS.Transport.Stats>) : FBS.Transport.Stats.Pack(builder, _o.Base);
            var _tuple = _o.Tuple == null ? default(Offset<FBS.Transport.Tuple>) : FBS.Transport.Tuple.Pack(builder, _o.Tuple);
            return CreateGetStatsResponse(
              builder,
              _base,
              _tuple);
        }
    }

    public class GetStatsResponseT
    {
        public FBS.Transport.StatsT Base { get; set; }

        public FBS.Transport.TupleT Tuple { get; set; }

        public GetStatsResponseT()
        {
            this.Base = null;
            this.Tuple = null;
        }
    }


    static public class GetStatsResponseVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyTable(tablePos, 4 /*Base*/, FBS.Transport.StatsVerify.Verify, true)
              && verifier.VerifyTable(tablePos, 6 /*Tuple*/, FBS.Transport.TupleVerify.Verify, true)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
