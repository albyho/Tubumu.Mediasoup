// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.Worker
{
    public struct DumpResponse : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static DumpResponse GetRootAsDumpResponse(ByteBuffer _bb) { return GetRootAsDumpResponse(_bb, new DumpResponse()); }
        public static DumpResponse GetRootAsDumpResponse(ByteBuffer _bb, DumpResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public DumpResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public uint Pid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public string WebRtcServerIds(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
        public int WebRtcServerIdsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
        public string RouterIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
        public int RouterIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
        public FBS.Worker.ChannelMessageHandlers? ChannelMessageHandlers { get { int o = __p.__offset(10); return o != 0 ? (FBS.Worker.ChannelMessageHandlers?)(new FBS.Worker.ChannelMessageHandlers()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.LibUring.Dump? Liburing { get { int o = __p.__offset(12); return o != 0 ? (FBS.LibUring.Dump?)(new FBS.LibUring.Dump()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<FBS.Worker.DumpResponse> CreateDumpResponse(FlatBufferBuilder builder,
            uint pid = 0,
            VectorOffset web_rtc_server_idsOffset = default(VectorOffset),
            VectorOffset router_idsOffset = default(VectorOffset),
            Offset<FBS.Worker.ChannelMessageHandlers> channel_message_handlersOffset = default(Offset<FBS.Worker.ChannelMessageHandlers>),
            Offset<FBS.LibUring.Dump> liburingOffset = default(Offset<FBS.LibUring.Dump>))
        {
            builder.StartTable(5);
            DumpResponse.AddLiburing(builder, liburingOffset);
            DumpResponse.AddChannelMessageHandlers(builder, channel_message_handlersOffset);
            DumpResponse.AddRouterIds(builder, router_idsOffset);
            DumpResponse.AddWebRtcServerIds(builder, web_rtc_server_idsOffset);
            DumpResponse.AddPid(builder, pid);
            return DumpResponse.EndDumpResponse(builder);
        }

        public static void StartDumpResponse(FlatBufferBuilder builder) { builder.StartTable(5); }
        public static void AddPid(FlatBufferBuilder builder, uint pid) { builder.AddUint(0, pid, 0); }
        public static void AddWebRtcServerIds(FlatBufferBuilder builder, VectorOffset webRtcServerIdsOffset) { builder.AddOffset(1, webRtcServerIdsOffset.Value, 0); }
        public static VectorOffset CreateWebRtcServerIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateWebRtcServerIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateWebRtcServerIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateWebRtcServerIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartWebRtcServerIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddRouterIds(FlatBufferBuilder builder, VectorOffset routerIdsOffset) { builder.AddOffset(2, routerIdsOffset.Value, 0); }
        public static VectorOffset CreateRouterIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateRouterIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateRouterIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateRouterIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartRouterIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddChannelMessageHandlers(FlatBufferBuilder builder, Offset<FBS.Worker.ChannelMessageHandlers> channelMessageHandlersOffset) { builder.AddOffset(3, channelMessageHandlersOffset.Value, 0); }
        public static void AddLiburing(FlatBufferBuilder builder, Offset<FBS.LibUring.Dump> liburingOffset) { builder.AddOffset(4, liburingOffset.Value, 0); }
        public static Offset<FBS.Worker.DumpResponse> EndDumpResponse(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 6);  // web_rtc_server_ids
            builder.Required(o, 8);  // router_ids
            builder.Required(o, 10);  // channel_message_handlers
            return new Offset<FBS.Worker.DumpResponse>(o);
        }
        public DumpResponseT UnPack()
        {
            var _o = new DumpResponseT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(DumpResponseT _o)
        {
            _o.Pid = this.Pid;
            _o.WebRtcServerIds = new List<string>();
            for(var _j = 0; _j < this.WebRtcServerIdsLength; ++_j)
            { _o.WebRtcServerIds.Add(this.WebRtcServerIds(_j)); }
            _o.RouterIds = new List<string>();
            for(var _j = 0; _j < this.RouterIdsLength; ++_j)
            { _o.RouterIds.Add(this.RouterIds(_j)); }
            _o.ChannelMessageHandlers = this.ChannelMessageHandlers.HasValue ? this.ChannelMessageHandlers.Value.UnPack() : null;
            _o.Liburing = this.Liburing.HasValue ? this.Liburing.Value.UnPack() : null;
        }
        public static Offset<FBS.Worker.DumpResponse> Pack(FlatBufferBuilder builder, DumpResponseT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Worker.DumpResponse>);
            var _web_rtc_server_ids = default(VectorOffset);
            if(_o.WebRtcServerIds != null)
            {
                var __web_rtc_server_ids = new StringOffset[_o.WebRtcServerIds.Count];
                for(var _j = 0; _j < __web_rtc_server_ids.Length; ++_j)
                { __web_rtc_server_ids[_j] = builder.CreateString(_o.WebRtcServerIds[_j]); }
                _web_rtc_server_ids = CreateWebRtcServerIdsVector(builder, __web_rtc_server_ids);
            }
            var _router_ids = default(VectorOffset);
            if(_o.RouterIds != null)
            {
                var __router_ids = new StringOffset[_o.RouterIds.Count];
                for(var _j = 0; _j < __router_ids.Length; ++_j)
                { __router_ids[_j] = builder.CreateString(_o.RouterIds[_j]); }
                _router_ids = CreateRouterIdsVector(builder, __router_ids);
            }
            var _channel_message_handlers = _o.ChannelMessageHandlers == null ? default(Offset<FBS.Worker.ChannelMessageHandlers>) : FBS.Worker.ChannelMessageHandlers.Pack(builder, _o.ChannelMessageHandlers);
            var _liburing = _o.Liburing == null ? default(Offset<FBS.LibUring.Dump>) : FBS.LibUring.Dump.Pack(builder, _o.Liburing);
            return CreateDumpResponse(
              builder,
              _o.Pid,
              _web_rtc_server_ids,
              _router_ids,
              _channel_message_handlers,
              _liburing);
        }
    }
}
