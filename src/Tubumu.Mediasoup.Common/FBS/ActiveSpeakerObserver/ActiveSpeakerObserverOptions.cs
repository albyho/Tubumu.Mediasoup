// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.ActiveSpeakerObserver
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct ActiveSpeakerObserverOptions : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static ActiveSpeakerObserverOptions GetRootAsActiveSpeakerObserverOptions(ByteBuffer _bb) { return GetRootAsActiveSpeakerObserverOptions(_bb, new ActiveSpeakerObserverOptions()); }
        public static ActiveSpeakerObserverOptions GetRootAsActiveSpeakerObserverOptions(ByteBuffer _bb, ActiveSpeakerObserverOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public ActiveSpeakerObserverOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public ushort Interval { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

        public static Offset<FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions> CreateActiveSpeakerObserverOptions(FlatBufferBuilder builder,
            ushort interval = 0)
        {
            builder.StartTable(1);
            ActiveSpeakerObserverOptions.AddInterval(builder, interval);
            return ActiveSpeakerObserverOptions.EndActiveSpeakerObserverOptions(builder);
        }

        public static void StartActiveSpeakerObserverOptions(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddInterval(FlatBufferBuilder builder, ushort interval) { builder.AddUshort(0, interval, 0); }
        public static Offset<FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions> EndActiveSpeakerObserverOptions(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions>(o);
        }
        public ActiveSpeakerObserverOptionsT UnPack()
        {
            var _o = new ActiveSpeakerObserverOptionsT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(ActiveSpeakerObserverOptionsT _o)
        {
            _o.Interval = this.Interval;
        }
        public static Offset<FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions> Pack(FlatBufferBuilder builder, ActiveSpeakerObserverOptionsT _o)
        {
            if(_o == null)
                return default(Offset<FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions>);
            return CreateActiveSpeakerObserverOptions(
              builder,
              _o.Interval);
        }
    }

    public class ActiveSpeakerObserverOptionsT
    {
        public ushort Interval { get; set; }

        public ActiveSpeakerObserverOptionsT()
        {
            this.Interval = 0;
        }
    }


    static public class ActiveSpeakerObserverOptionsVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyField(tablePos, 4 /*Interval*/, 2 /*ushort*/, 2, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
