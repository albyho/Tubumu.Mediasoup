// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.Producer
{
    public struct DumpResponse : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static DumpResponse GetRootAsDumpResponse(ByteBuffer _bb) { return GetRootAsDumpResponse(_bb, new DumpResponse()); }
        public static DumpResponse GetRootAsDumpResponse(ByteBuffer _bb, DumpResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public DumpResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
        public FBS.RtpParameters.MediaKind Kind { get { int o = __p.__offset(6); return o != 0 ? (FBS.RtpParameters.MediaKind)__p.bb.Get(o + __p.bb_pos) : FBS.RtpParameters.MediaKind.AUDIO; } }
        public FBS.RtpParameters.Type Type { get { int o = __p.__offset(8); return o != 0 ? (FBS.RtpParameters.Type)__p.bb.Get(o + __p.bb_pos) : FBS.RtpParameters.Type.SIMPLE; } }
        public FBS.RtpParameters.RtpParameters? RtpParameters { get { int o = __p.__offset(10); return o != 0 ? (FBS.RtpParameters.RtpParameters?)(new FBS.RtpParameters.RtpParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.RtpParameters.RtpMapping? RtpMapping { get { int o = __p.__offset(12); return o != 0 ? (FBS.RtpParameters.RtpMapping?)(new FBS.RtpParameters.RtpMapping()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.RtpStream.Dump? RtpStreams(int j) { int o = __p.__offset(14); return o != 0 ? (FBS.RtpStream.Dump?)(new FBS.RtpStream.Dump()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int RtpStreamsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
        public FBS.Producer.TraceEventType TraceEventTypes(int j) { int o = __p.__offset(16); return o != 0 ? (FBS.Producer.TraceEventType)__p.bb.Get(__p.__vector(o) + j * 1) : (FBS.Producer.TraceEventType)0; }
        public int TraceEventTypesLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FBS.Producer.TraceEventType> GetTraceEventTypesBytes() { return __p.__vector_as_span<FBS.Producer.TraceEventType>(16, 1); }
#else
        public ArraySegment<byte>? GetTraceEventTypesBytes() { return __p.__vector_as_arraysegment(16); }
#endif
        public FBS.Producer.TraceEventType[] GetTraceEventTypesArray() { int o = __p.__offset(16); if(o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FBS.Producer.TraceEventType[] a = new FBS.Producer.TraceEventType[l]; for(int i = 0; i < l; i++) { a[i] = (FBS.Producer.TraceEventType)__p.bb.Get(p + i * 1); } return a; }
        public bool Paused { get { int o = __p.__offset(18); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }

        public static Offset<FBS.Producer.DumpResponse> CreateDumpResponse(FlatBufferBuilder builder,
            StringOffset idOffset = default(StringOffset),
            FBS.RtpParameters.MediaKind kind = FBS.RtpParameters.MediaKind.AUDIO,
            FBS.RtpParameters.Type type = FBS.RtpParameters.Type.SIMPLE,
            Offset<FBS.RtpParameters.RtpParameters> rtp_parametersOffset = default(Offset<FBS.RtpParameters.RtpParameters>),
            Offset<FBS.RtpParameters.RtpMapping> rtp_mappingOffset = default(Offset<FBS.RtpParameters.RtpMapping>),
            VectorOffset rtp_streamsOffset = default(VectorOffset),
            VectorOffset trace_event_typesOffset = default(VectorOffset),
            bool paused = false)
        {
            builder.StartTable(8);
            DumpResponse.AddTraceEventTypes(builder, trace_event_typesOffset);
            DumpResponse.AddRtpStreams(builder, rtp_streamsOffset);
            DumpResponse.AddRtpMapping(builder, rtp_mappingOffset);
            DumpResponse.AddRtpParameters(builder, rtp_parametersOffset);
            DumpResponse.AddId(builder, idOffset);
            DumpResponse.AddPaused(builder, paused);
            DumpResponse.AddType(builder, type);
            DumpResponse.AddKind(builder, kind);
            return DumpResponse.EndDumpResponse(builder);
        }

        public static void StartDumpResponse(FlatBufferBuilder builder) { builder.StartTable(8); }
        public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
        public static void AddKind(FlatBufferBuilder builder, FBS.RtpParameters.MediaKind kind) { builder.AddByte(1, (byte)kind, 0); }
        public static void AddType(FlatBufferBuilder builder, FBS.RtpParameters.Type type) { builder.AddByte(2, (byte)type, 0); }
        public static void AddRtpParameters(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpParameters> rtpParametersOffset) { builder.AddOffset(3, rtpParametersOffset.Value, 0); }
        public static void AddRtpMapping(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpMapping> rtpMappingOffset) { builder.AddOffset(4, rtpMappingOffset.Value, 0); }
        public static void AddRtpStreams(FlatBufferBuilder builder, VectorOffset rtpStreamsOffset) { builder.AddOffset(5, rtpStreamsOffset.Value, 0); }
        public static VectorOffset CreateRtpStreamsVector(FlatBufferBuilder builder, Offset<FBS.RtpStream.Dump>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateRtpStreamsVectorBlock(FlatBufferBuilder builder, Offset<FBS.RtpStream.Dump>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateRtpStreamsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.RtpStream.Dump>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateRtpStreamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.RtpStream.Dump>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartRtpStreamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddTraceEventTypes(FlatBufferBuilder builder, VectorOffset traceEventTypesOffset) { builder.AddOffset(6, traceEventTypesOffset.Value, 0); }
        public static VectorOffset CreateTraceEventTypesVector(FlatBufferBuilder builder, FBS.Producer.TraceEventType[] data) { builder.StartVector(1, data.Length, 1); for(int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
        public static VectorOffset CreateTraceEventTypesVectorBlock(FlatBufferBuilder builder, FBS.Producer.TraceEventType[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateTraceEventTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<FBS.Producer.TraceEventType> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateTraceEventTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FBS.Producer.TraceEventType>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartTraceEventTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static void AddPaused(FlatBufferBuilder builder, bool paused) { builder.AddBool(7, paused, false); }
        public static Offset<FBS.Producer.DumpResponse> EndDumpResponse(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // id
            builder.Required(o, 10);  // rtp_parameters
            builder.Required(o, 12);  // rtp_mapping
            builder.Required(o, 14);  // rtp_streams
            builder.Required(o, 16);  // trace_event_types
            return new Offset<FBS.Producer.DumpResponse>(o);
        }
        public DumpResponseT UnPack()
        {
            var _o = new DumpResponseT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(DumpResponseT _o)
        {
            _o.Id = this.Id;
            _o.Kind = this.Kind;
            _o.Type = this.Type;
            _o.RtpParameters = this.RtpParameters.HasValue ? this.RtpParameters.Value.UnPack() : null;
            _o.RtpMapping = this.RtpMapping.HasValue ? this.RtpMapping.Value.UnPack() : null;
            _o.RtpStreams = new List<FBS.RtpStream.DumpT>();
            for(var _j = 0; _j < this.RtpStreamsLength; ++_j)
            { _o.RtpStreams.Add(this.RtpStreams(_j).HasValue ? this.RtpStreams(_j).Value.UnPack() : null); }
            _o.TraceEventTypes = new List<FBS.Producer.TraceEventType>();
            for(var _j = 0; _j < this.TraceEventTypesLength; ++_j)
            { _o.TraceEventTypes.Add(this.TraceEventTypes(_j)); }
            _o.Paused = this.Paused;
        }
        public static Offset<FBS.Producer.DumpResponse> Pack(FlatBufferBuilder builder, DumpResponseT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Producer.DumpResponse>);
            var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
            var _rtp_parameters = _o.RtpParameters == null ? default(Offset<FBS.RtpParameters.RtpParameters>) : FBS.RtpParameters.RtpParameters.Pack(builder, _o.RtpParameters);
            var _rtp_mapping = _o.RtpMapping == null ? default(Offset<FBS.RtpParameters.RtpMapping>) : FBS.RtpParameters.RtpMapping.Pack(builder, _o.RtpMapping);
            var _rtp_streams = default(VectorOffset);
            if(_o.RtpStreams != null)
            {
                var __rtp_streams = new Offset<FBS.RtpStream.Dump>[_o.RtpStreams.Count];
                for(var _j = 0; _j < __rtp_streams.Length; ++_j)
                { __rtp_streams[_j] = FBS.RtpStream.Dump.Pack(builder, _o.RtpStreams[_j]); }
                _rtp_streams = CreateRtpStreamsVector(builder, __rtp_streams);
            }
            var _trace_event_types = default(VectorOffset);
            if(_o.TraceEventTypes != null)
            {
                var __trace_event_types = _o.TraceEventTypes.ToArray();
                _trace_event_types = CreateTraceEventTypesVector(builder, __trace_event_types);
            }
            return CreateDumpResponse(
              builder,
              _id,
              _o.Kind,
              _o.Type,
              _rtp_parameters,
              _rtp_mapping,
              _rtp_streams,
              _trace_event_types,
              _o.Paused);
        }
    }
}
