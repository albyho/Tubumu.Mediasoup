// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.Producer
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct Score : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static Score GetRootAsScore(ByteBuffer _bb) { return GetRootAsScore(_bb, new Score()); }
        public static Score GetRootAsScore(ByteBuffer _bb, Score obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Score __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public uint EncodingIdx { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public uint Ssrc { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public string Rid { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRidBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
        public ArraySegment<byte>? GetRidBytes() { return __p.__vector_as_arraysegment(8); }
#endif
        public byte[] GetRidArray() { return __p.__vector_as_array<byte>(8); }
        public byte Score_ { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

        public static Offset<FBS.Producer.Score> CreateScore(FlatBufferBuilder builder,
            uint encoding_idx = 0,
            uint ssrc = 0,
            StringOffset ridOffset = default(StringOffset),
            byte score = 0)
        {
            builder.StartTable(4);
            Score.AddRid(builder, ridOffset);
            Score.AddSsrc(builder, ssrc);
            Score.AddEncodingIdx(builder, encoding_idx);
            Score.AddScore(builder, score);
            return Score.EndScore(builder);
        }

        public static void StartScore(FlatBufferBuilder builder) { builder.StartTable(4); }
        public static void AddEncodingIdx(FlatBufferBuilder builder, uint encodingIdx) { builder.AddUint(0, encodingIdx, 0); }
        public static void AddSsrc(FlatBufferBuilder builder, uint ssrc) { builder.AddUint(1, ssrc, 0); }
        public static void AddRid(FlatBufferBuilder builder, StringOffset ridOffset) { builder.AddOffset(2, ridOffset.Value, 0); }
        public static void AddScore(FlatBufferBuilder builder, byte score) { builder.AddByte(3, score, 0); }
        public static Offset<FBS.Producer.Score> EndScore(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.Producer.Score>(o);
        }
        public ScoreT UnPack()
        {
            var _o = new ScoreT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(ScoreT _o)
        {
            _o.EncodingIdx = this.EncodingIdx;
            _o.Ssrc = this.Ssrc;
            _o.Rid = this.Rid;
            _o.Score_ = this.Score_;
        }
        public static Offset<FBS.Producer.Score> Pack(FlatBufferBuilder builder, ScoreT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Producer.Score>);
            var _rid = _o.Rid == null ? default(StringOffset) : builder.CreateString(_o.Rid);
            return CreateScore(
              builder,
              _o.EncodingIdx,
              _o.Ssrc,
              _rid,
              _o.Score_);
        }
    }

    public class ScoreT
    {
        public uint EncodingIdx { get; set; }

        public uint Ssrc { get; set; }

        public string Rid { get; set; }
        [JsonPropertyName("score")]
        public byte Score_ { get; set; }

        public ScoreT()
        {
            this.EncodingIdx = 0;
            this.Ssrc = 0;
            this.Rid = null;
            this.Score_ = 0;
        }
    }


    static public class ScoreVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyField(tablePos, 4 /*EncodingIdx*/, 4 /*uint*/, 4, false)
              && verifier.VerifyField(tablePos, 6 /*Ssrc*/, 4 /*uint*/, 4, false)
              && verifier.VerifyString(tablePos, 8 /*Rid*/, false)
              && verifier.VerifyField(tablePos, 10 /*Score*/, 1 /*byte*/, 1, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
