// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.Producer
{
    public struct VideoOrientationChangeNotification : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static VideoOrientationChangeNotification GetRootAsVideoOrientationChangeNotification(ByteBuffer _bb) { return GetRootAsVideoOrientationChangeNotification(_bb, new VideoOrientationChangeNotification()); }
        public static VideoOrientationChangeNotification GetRootAsVideoOrientationChangeNotification(ByteBuffer _bb, VideoOrientationChangeNotification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public VideoOrientationChangeNotification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public bool Camera { get { int o = __p.__offset(4); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public bool Flip { get { int o = __p.__offset(6); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public ushort Rotation { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

        public static Offset<FBS.Producer.VideoOrientationChangeNotification> CreateVideoOrientationChangeNotification(FlatBufferBuilder builder,
            bool camera = false,
            bool flip = false,
            ushort rotation = 0)
        {
            builder.StartTable(3);
            VideoOrientationChangeNotification.AddRotation(builder, rotation);
            VideoOrientationChangeNotification.AddFlip(builder, flip);
            VideoOrientationChangeNotification.AddCamera(builder, camera);
            return VideoOrientationChangeNotification.EndVideoOrientationChangeNotification(builder);
        }

        public static void StartVideoOrientationChangeNotification(FlatBufferBuilder builder) { builder.StartTable(3); }
        public static void AddCamera(FlatBufferBuilder builder, bool camera) { builder.AddBool(0, camera, false); }
        public static void AddFlip(FlatBufferBuilder builder, bool flip) { builder.AddBool(1, flip, false); }
        public static void AddRotation(FlatBufferBuilder builder, ushort rotation) { builder.AddUshort(2, rotation, 0); }
        public static Offset<FBS.Producer.VideoOrientationChangeNotification> EndVideoOrientationChangeNotification(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.Producer.VideoOrientationChangeNotification>(o);
        }
        public VideoOrientationChangeNotificationT UnPack()
        {
            var _o = new VideoOrientationChangeNotificationT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(VideoOrientationChangeNotificationT _o)
        {
            _o.Camera = this.Camera;
            _o.Flip = this.Flip;
            _o.Rotation = this.Rotation;
        }
        public static Offset<FBS.Producer.VideoOrientationChangeNotification> Pack(FlatBufferBuilder builder, VideoOrientationChangeNotificationT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Producer.VideoOrientationChangeNotification>);
            return CreateVideoOrientationChangeNotification(
              builder,
              _o.Camera,
              _o.Flip,
              _o.Rotation);
        }
    }

    public class VideoOrientationChangeNotificationT
    {
        [JsonPropertyName("camera")]
        public bool Camera { get; set; }
        [JsonPropertyName("flip")]
        public bool Flip { get; set; }
        [JsonPropertyName("rotation")]
        public ushort Rotation { get; set; }

        public VideoOrientationChangeNotificationT()
        {
            this.Camera = false;
            this.Flip = false;
            this.Rotation = 0;
        }
    }
}
