// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Google.FlatBuffers;

namespace FBS.RtpStream
{
    public struct RecvStats : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static RecvStats GetRootAsRecvStats(ByteBuffer _bb) { return GetRootAsRecvStats(_bb, new RecvStats()); }
        public static RecvStats GetRootAsRecvStats(ByteBuffer _bb, RecvStats obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public RecvStats __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.RtpStream.Stats? Base { get { int o = __p.__offset(4); return o != 0 ? (FBS.RtpStream.Stats?)(new FBS.RtpStream.Stats()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public uint Jitter { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public ulong PacketCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public ulong ByteCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public uint Bitrate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public FBS.RtpStream.BitrateByLayer? BitrateByLayer(int j) { int o = __p.__offset(14); return o != 0 ? (FBS.RtpStream.BitrateByLayer?)(new FBS.RtpStream.BitrateByLayer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int BitrateByLayerLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

        public static Offset<FBS.RtpStream.RecvStats> CreateRecvStats(FlatBufferBuilder builder,
            Offset<FBS.RtpStream.Stats> @baseOffset = default(Offset<FBS.RtpStream.Stats>),
            uint jitter = 0,
            ulong packet_count = 0,
            ulong byte_count = 0,
            uint bitrate = 0,
            VectorOffset bitrate_by_layerOffset = default(VectorOffset))
        {
            builder.StartTable(6);
            RecvStats.AddByteCount(builder, byte_count);
            RecvStats.AddPacketCount(builder, packet_count);
            RecvStats.AddBitrateByLayer(builder, bitrate_by_layerOffset);
            RecvStats.AddBitrate(builder, bitrate);
            RecvStats.AddJitter(builder, jitter);
            RecvStats.AddBase(builder, @baseOffset);
            return RecvStats.EndRecvStats(builder);
        }

        public static void StartRecvStats(FlatBufferBuilder builder) { builder.StartTable(6); }
        public static void AddBase(FlatBufferBuilder builder, Offset<FBS.RtpStream.Stats> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
        public static void AddJitter(FlatBufferBuilder builder, uint jitter) { builder.AddUint(1, jitter, 0); }
        public static void AddPacketCount(FlatBufferBuilder builder, ulong packetCount) { builder.AddUlong(2, packetCount, 0); }
        public static void AddByteCount(FlatBufferBuilder builder, ulong byteCount) { builder.AddUlong(3, byteCount, 0); }
        public static void AddBitrate(FlatBufferBuilder builder, uint bitrate) { builder.AddUint(4, bitrate, 0); }
        public static void AddBitrateByLayer(FlatBufferBuilder builder, VectorOffset bitrateByLayerOffset) { builder.AddOffset(5, bitrateByLayerOffset.Value, 0); }
        public static VectorOffset CreateBitrateByLayerVector(FlatBufferBuilder builder, Offset<FBS.RtpStream.BitrateByLayer>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateBitrateByLayerVectorBlock(FlatBufferBuilder builder, Offset<FBS.RtpStream.BitrateByLayer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateBitrateByLayerVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.RtpStream.BitrateByLayer>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateBitrateByLayerVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.RtpStream.BitrateByLayer>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartBitrateByLayerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<FBS.RtpStream.RecvStats> EndRecvStats(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // base
            builder.Required(o, 14);  // bitrate_by_layer
            return new Offset<FBS.RtpStream.RecvStats>(o);
        }
        public RecvStatsT UnPack()
        {
            var _o = new RecvStatsT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(RecvStatsT _o)
        {
            _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
            _o.Jitter = this.Jitter;
            _o.PacketCount = this.PacketCount;
            _o.ByteCount = this.ByteCount;
            _o.Bitrate = this.Bitrate;
            _o.BitrateByLayer = new List<FBS.RtpStream.BitrateByLayerT>();
            for(var _j = 0; _j < this.BitrateByLayerLength; ++_j)
            { _o.BitrateByLayer.Add(this.BitrateByLayer(_j).HasValue ? this.BitrateByLayer(_j).Value.UnPack() : null); }
        }
        public static Offset<FBS.RtpStream.RecvStats> Pack(FlatBufferBuilder builder, RecvStatsT _o)
        {
            if(_o == null)
                return default(Offset<FBS.RtpStream.RecvStats>);
            var _base = _o.Base == null ? default(Offset<FBS.RtpStream.Stats>) : FBS.RtpStream.Stats.Pack(builder, _o.Base);
            var _bitrate_by_layer = default(VectorOffset);
            if(_o.BitrateByLayer != null)
            {
                var __bitrate_by_layer = new Offset<FBS.RtpStream.BitrateByLayer>[_o.BitrateByLayer.Count];
                for(var _j = 0; _j < __bitrate_by_layer.Length; ++_j)
                { __bitrate_by_layer[_j] = FBS.RtpStream.BitrateByLayer.Pack(builder, _o.BitrateByLayer[_j]); }
                _bitrate_by_layer = CreateBitrateByLayerVector(builder, __bitrate_by_layer);
            }
            return CreateRecvStats(
              builder,
              _base,
              _o.Jitter,
              _o.PacketCount,
              _o.ByteCount,
              _o.Bitrate,
              _bitrate_by_layer);
        }
    }

    public class RecvStatsT
    {
        [JsonPropertyName("base")]
        public FBS.RtpStream.StatsT Base { get; set; }
        [JsonPropertyName("jitter")]
        public uint Jitter { get; set; }
        [JsonPropertyName("packet_count")]
        public ulong PacketCount { get; set; }
        [JsonPropertyName("byte_count")]
        public ulong ByteCount { get; set; }
        [JsonPropertyName("bitrate")]
        public uint Bitrate { get; set; }
        [JsonPropertyName("bitrate_by_layer")]
        public List<FBS.RtpStream.BitrateByLayerT> BitrateByLayer { get; set; }

        public RecvStatsT()
        {
            this.Base = null;
            this.Jitter = 0;
            this.PacketCount = 0;
            this.ByteCount = 0;
            this.Bitrate = 0;
            this.BitrateByLayer = null;
        }
    }


}
