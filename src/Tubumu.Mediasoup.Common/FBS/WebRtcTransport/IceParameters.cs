// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.WebRtcTransport
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct IceParameters : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static IceParameters GetRootAsIceParameters(ByteBuffer _bb) { return GetRootAsIceParameters(_bb, new IceParameters()); }
        public static IceParameters GetRootAsIceParameters(ByteBuffer _bb, IceParameters obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public IceParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string UsernameFragment { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUsernameFragmentBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetUsernameFragmentBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetUsernameFragmentArray() { return __p.__vector_as_array<byte>(4); }
        public string Password { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPasswordBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
        public ArraySegment<byte>? GetPasswordBytes() { return __p.__vector_as_arraysegment(6); }
#endif
        public byte[] GetPasswordArray() { return __p.__vector_as_array<byte>(6); }
        public bool IceLite { get { int o = __p.__offset(8); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)true; } }

        public static Offset<FBS.WebRtcTransport.IceParameters> CreateIceParameters(FlatBufferBuilder builder,
            StringOffset username_fragmentOffset = default(StringOffset),
            StringOffset passwordOffset = default(StringOffset),
            bool ice_lite = true)
        {
            builder.StartTable(3);
            IceParameters.AddPassword(builder, passwordOffset);
            IceParameters.AddUsernameFragment(builder, username_fragmentOffset);
            IceParameters.AddIceLite(builder, ice_lite);
            return IceParameters.EndIceParameters(builder);
        }

        public static void StartIceParameters(FlatBufferBuilder builder) { builder.StartTable(3); }
        public static void AddUsernameFragment(FlatBufferBuilder builder, StringOffset usernameFragmentOffset) { builder.AddOffset(0, usernameFragmentOffset.Value, 0); }
        public static void AddPassword(FlatBufferBuilder builder, StringOffset passwordOffset) { builder.AddOffset(1, passwordOffset.Value, 0); }
        public static void AddIceLite(FlatBufferBuilder builder, bool iceLite) { builder.AddBool(2, iceLite, true); }
        public static Offset<FBS.WebRtcTransport.IceParameters> EndIceParameters(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // username_fragment
            builder.Required(o, 6);  // password
            return new Offset<FBS.WebRtcTransport.IceParameters>(o);
        }
        public IceParametersT UnPack()
        {
            var _o = new IceParametersT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(IceParametersT _o)
        {
            _o.UsernameFragment = this.UsernameFragment;
            _o.Password = this.Password;
            _o.IceLite = this.IceLite;
        }
        public static Offset<FBS.WebRtcTransport.IceParameters> Pack(FlatBufferBuilder builder, IceParametersT _o)
        {
            if(_o == null)
                return default(Offset<FBS.WebRtcTransport.IceParameters>);
            var _username_fragment = _o.UsernameFragment == null ? default(StringOffset) : builder.CreateString(_o.UsernameFragment);
            var _password = _o.Password == null ? default(StringOffset) : builder.CreateString(_o.Password);
            return CreateIceParameters(
              builder,
              _username_fragment,
              _password,
              _o.IceLite);
        }
    }

    public class IceParametersT
    {
        public string UsernameFragment { get; set; }

        public string Password { get; set; }

        public bool IceLite { get; set; }

        public IceParametersT()
        {
            this.UsernameFragment = null;
            this.Password = null;
            this.IceLite = true;
        }
    }


    static public class IceParametersVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyString(tablePos, 4 /*UsernameFragment*/, true)
              && verifier.VerifyString(tablePos, 6 /*Password*/, true)
              && verifier.VerifyField(tablePos, 8 /*IceLite*/, 1 /*bool*/, 1, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
