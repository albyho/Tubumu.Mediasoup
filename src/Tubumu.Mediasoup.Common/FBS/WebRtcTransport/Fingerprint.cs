// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.WebRtcTransport
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct Fingerprint : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static Fingerprint GetRootAsFingerprint(ByteBuffer _bb) { return GetRootAsFingerprint(_bb, new Fingerprint()); }
        public static Fingerprint GetRootAsFingerprint(ByteBuffer _bb, Fingerprint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Fingerprint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.WebRtcTransport.FingerprintAlgorithm Algorithm { get { int o = __p.__offset(4); return o != 0 ? (FBS.WebRtcTransport.FingerprintAlgorithm)__p.bb.Get(o + __p.bb_pos) : FBS.WebRtcTransport.FingerprintAlgorithm.SHA1; } }
        public string Value { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
        public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(6); }
#endif
        public byte[] GetValueArray() { return __p.__vector_as_array<byte>(6); }

        public static Offset<FBS.WebRtcTransport.Fingerprint> CreateFingerprint(FlatBufferBuilder builder,
            FBS.WebRtcTransport.FingerprintAlgorithm algorithm = FBS.WebRtcTransport.FingerprintAlgorithm.SHA1,
            StringOffset valueOffset = default(StringOffset))
        {
            builder.StartTable(2);
            Fingerprint.AddValue(builder, valueOffset);
            Fingerprint.AddAlgorithm(builder, algorithm);
            return Fingerprint.EndFingerprint(builder);
        }

        public static void StartFingerprint(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddAlgorithm(FlatBufferBuilder builder, FBS.WebRtcTransport.FingerprintAlgorithm algorithm) { builder.AddByte(0, (byte)algorithm, 0); }
        public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
        public static Offset<FBS.WebRtcTransport.Fingerprint> EndFingerprint(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 6);  // value
            return new Offset<FBS.WebRtcTransport.Fingerprint>(o);
        }
        public FingerprintT UnPack()
        {
            var _o = new FingerprintT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(FingerprintT _o)
        {
            _o.Algorithm = this.Algorithm;
            _o.Value = this.Value;
        }
        public static Offset<FBS.WebRtcTransport.Fingerprint> Pack(FlatBufferBuilder builder, FingerprintT _o)
        {
            if(_o == null)
                return default(Offset<FBS.WebRtcTransport.Fingerprint>);
            var _value = _o.Value == null ? default(StringOffset) : builder.CreateString(_o.Value);
            return CreateFingerprint(
              builder,
              _o.Algorithm,
              _value);
        }
    }

    public class FingerprintT
    {
        public FBS.WebRtcTransport.FingerprintAlgorithm Algorithm { get; set; }

        public string Value { get; set; }

        public FingerprintT()
        {
            this.Algorithm = FBS.WebRtcTransport.FingerprintAlgorithm.SHA1;
            this.Value = null;
        }
    }


    static public class FingerprintVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyField(tablePos, 4 /*Algorithm*/, 1 /*FBS.WebRtcTransport.FingerprintAlgorithm*/, 1, false)
              && verifier.VerifyString(tablePos, 6 /*Value*/, true)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
