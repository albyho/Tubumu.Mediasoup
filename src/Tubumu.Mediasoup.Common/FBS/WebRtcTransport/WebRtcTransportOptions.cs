// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using Google.FlatBuffers;

namespace FBS.WebRtcTransport
{
    public struct WebRtcTransportOptions : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static WebRtcTransportOptions GetRootAsWebRtcTransportOptions(ByteBuffer _bb) { return GetRootAsWebRtcTransportOptions(_bb, new WebRtcTransportOptions()); }
        public static WebRtcTransportOptions GetRootAsWebRtcTransportOptions(ByteBuffer _bb, WebRtcTransportOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public WebRtcTransportOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Transport.Options? Base { get { int o = __p.__offset(4); return o != 0 ? (FBS.Transport.Options?)(new FBS.Transport.Options()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.WebRtcTransport.Listen ListenType { get { int o = __p.__offset(6); return o != 0 ? (FBS.WebRtcTransport.Listen)__p.bb.Get(o + __p.bb_pos) : FBS.WebRtcTransport.Listen.NONE; } }
        public TTable? Listen<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
        public FBS.WebRtcTransport.ListenIndividual ListenAsListenIndividual() { return Listen<FBS.WebRtcTransport.ListenIndividual>().Value; }
        public FBS.WebRtcTransport.ListenServer ListenAsListenServer() { return Listen<FBS.WebRtcTransport.ListenServer>().Value; }
        public bool EnableUdp { get { int o = __p.__offset(10); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)true; } }
        public bool EnableTcp { get { int o = __p.__offset(12); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)true; } }
        public bool PreferUdp { get { int o = __p.__offset(14); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public bool PreferTcp { get { int o = __p.__offset(16); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }

        public static Offset<FBS.WebRtcTransport.WebRtcTransportOptions> CreateWebRtcTransportOptions(FlatBufferBuilder builder,
            Offset<FBS.Transport.Options> @baseOffset = default(Offset<FBS.Transport.Options>),
            FBS.WebRtcTransport.Listen listen_type = FBS.WebRtcTransport.Listen.NONE,
            int listenOffset = 0,
            bool enable_udp = true,
            bool enable_tcp = true,
            bool prefer_udp = false,
            bool prefer_tcp = false)
        {
            builder.StartTable(7);
            WebRtcTransportOptions.AddListen(builder, listenOffset);
            WebRtcTransportOptions.AddBase(builder, @baseOffset);
            WebRtcTransportOptions.AddPreferTcp(builder, prefer_tcp);
            WebRtcTransportOptions.AddPreferUdp(builder, prefer_udp);
            WebRtcTransportOptions.AddEnableTcp(builder, enable_tcp);
            WebRtcTransportOptions.AddEnableUdp(builder, enable_udp);
            WebRtcTransportOptions.AddListenType(builder, listen_type);
            return WebRtcTransportOptions.EndWebRtcTransportOptions(builder);
        }

        public static void StartWebRtcTransportOptions(FlatBufferBuilder builder) { builder.StartTable(7); }
        public static void AddBase(FlatBufferBuilder builder, Offset<FBS.Transport.Options> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
        public static void AddListenType(FlatBufferBuilder builder, FBS.WebRtcTransport.Listen listenType) { builder.AddByte(1, (byte)listenType, 0); }
        public static void AddListen(FlatBufferBuilder builder, int listenOffset) { builder.AddOffset(2, listenOffset, 0); }
        public static void AddEnableUdp(FlatBufferBuilder builder, bool enableUdp) { builder.AddBool(3, enableUdp, true); }
        public static void AddEnableTcp(FlatBufferBuilder builder, bool enableTcp) { builder.AddBool(4, enableTcp, true); }
        public static void AddPreferUdp(FlatBufferBuilder builder, bool preferUdp) { builder.AddBool(5, preferUdp, false); }
        public static void AddPreferTcp(FlatBufferBuilder builder, bool preferTcp) { builder.AddBool(6, preferTcp, false); }
        public static Offset<FBS.WebRtcTransport.WebRtcTransportOptions> EndWebRtcTransportOptions(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // base
            builder.Required(o, 8);  // listen
            return new Offset<FBS.WebRtcTransport.WebRtcTransportOptions>(o);
        }
        public WebRtcTransportOptionsT UnPack()
        {
            var _o = new WebRtcTransportOptionsT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(WebRtcTransportOptionsT _o)
        {
            _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
            _o.Listen = new FBS.WebRtcTransport.ListenUnion();
            _o.Listen.Type = this.ListenType;
            switch(this.ListenType)
            {
                default:
                    break;
                case FBS.WebRtcTransport.Listen.ListenIndividual:
                    _o.Listen.Value = this.Listen<FBS.WebRtcTransport.ListenIndividual>().HasValue ? this.Listen<FBS.WebRtcTransport.ListenIndividual>().Value.UnPack() : null;
                    break;
                case FBS.WebRtcTransport.Listen.ListenServer:
                    _o.Listen.Value = this.Listen<FBS.WebRtcTransport.ListenServer>().HasValue ? this.Listen<FBS.WebRtcTransport.ListenServer>().Value.UnPack() : null;
                    break;
            }
            _o.EnableUdp = this.EnableUdp;
            _o.EnableTcp = this.EnableTcp;
            _o.PreferUdp = this.PreferUdp;
            _o.PreferTcp = this.PreferTcp;
        }
        public static Offset<FBS.WebRtcTransport.WebRtcTransportOptions> Pack(FlatBufferBuilder builder, WebRtcTransportOptionsT _o)
        {
            if(_o == null)
                return default(Offset<FBS.WebRtcTransport.WebRtcTransportOptions>);
            var _base = _o.Base == null ? default(Offset<FBS.Transport.Options>) : FBS.Transport.Options.Pack(builder, _o.Base);
            var _listen_type = _o.Listen == null ? FBS.WebRtcTransport.Listen.NONE : _o.Listen.Type;
            var _listen = _o.Listen == null ? 0 : FBS.WebRtcTransport.ListenUnion.Pack(builder, _o.Listen);
            return CreateWebRtcTransportOptions(
              builder,
              _base,
              _listen_type,
              _listen,
              _o.EnableUdp,
              _o.EnableTcp,
              _o.PreferUdp,
              _o.PreferTcp);
        }
    }
}
