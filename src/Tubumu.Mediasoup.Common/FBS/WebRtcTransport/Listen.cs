// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace FBS.WebRtcTransport
{
    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Listen : byte
    {
        [EnumMember(Value = "none")]
        NONE = 0,

        [EnumMember(Value = "listenIndividual")]
        ListenIndividual = 1,

        [EnumMember(Value = "listenServer")]
        ListenServer = 2,
    }

    public class ListenUnion
    {
        public Listen Type { get; set; }
        public object Value { get; set; }

        public ListenUnion()
        {
            this.Type = Listen.NONE;
            this.Value = null;
        }

        public T As<T>() where T : class { return this.Value as T; }
        public FBS.WebRtcTransport.ListenIndividualT AsListenIndividual() { return this.As<FBS.WebRtcTransport.ListenIndividualT>(); }
        public static ListenUnion FromListenIndividual(FBS.WebRtcTransport.ListenIndividualT _listenindividual) { return new ListenUnion { Type = Listen.ListenIndividual, Value = _listenindividual }; }
        public FBS.WebRtcTransport.ListenServerT AsListenServer() { return this.As<FBS.WebRtcTransport.ListenServerT>(); }
        public static ListenUnion FromListenServer(FBS.WebRtcTransport.ListenServerT _listenserver) { return new ListenUnion { Type = Listen.ListenServer, Value = _listenserver }; }

        public static int Pack(Google.FlatBuffers.FlatBufferBuilder builder, ListenUnion _o)
        {
            switch(_o.Type)
            {
                default:
                    return 0;
                case Listen.ListenIndividual:
                    return FBS.WebRtcTransport.ListenIndividual.Pack(builder, _o.AsListenIndividual()).Value;
                case Listen.ListenServer:
                    return FBS.WebRtcTransport.ListenServer.Pack(builder, _o.AsListenServer()).Value;
            }
        }
    }

    public class ListenUnion_JsonConverter : JsonConverterFactory
    {
        public override bool CanConvert(Type typeToConvert)
        {
            return typeToConvert == typeof(ListenUnion) || typeToConvert == typeof(List<ListenUnion>);
        }

        public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
        {
            return (JsonConverter)Activator.CreateInstance(
                typeof(ListenUnionConverterInner<>).MakeGenericType(typeToConvert),
                options
            );
        }

        private class ListenUnionConverterInner<T> : JsonConverter<T>
        {
            private readonly JsonSerializerOptions _options;

            public ListenUnionConverterInner(JsonSerializerOptions options)
            {
                _options = options;
            }

            public override T Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                if(typeToConvert == typeof(List<ListenUnion>))
                {
                    return JsonSerializer.Deserialize<T>(ref reader, _options);
                }
                else if(typeToConvert == typeof(ListenUnion))
                {
                    using(JsonDocument doc = JsonDocument.ParseValue(ref reader))
                    {
                        var root = doc.RootElement;
                        var type = root.GetProperty("Type").GetInt32();
                        ListenUnion result = new ListenUnion
                        {
                            Type = (Listen)type,
                            Value = DeserializeListenUnionValue(root.GetProperty("Value"), (Listen)type, _options)
                        };
                        return (T)(object)result;
                    }
                }
                else
                {
                    throw new NotSupportedException();
                }
            }

            public override void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
            {
                if(typeof(T) == typeof(List<ListenUnion>))
                {
                    JsonSerializer.Serialize(writer, value, _options);
                }
                else if(typeof(T) == typeof(ListenUnion))
                {
                    var listenUnion = value as ListenUnion;
                    if(listenUnion != null)
                    {
                        writer.WriteStartObject();
                        writer.WriteNumber("Type", (int)listenUnion.Type);
                        writer.WritePropertyName("Value");
                        SerializeListenUnionValue(writer, listenUnion.Value, _options);
                        writer.WriteEndObject();
                    }
                }
                else
                {
                    throw new NotSupportedException();
                }
            }

            private object DeserializeListenUnionValue(JsonElement element, Listen type, JsonSerializerOptions options)
            {
                switch(type)
                {
                    case Listen.ListenIndividual:
                        return JsonSerializer.Deserialize<FBS.WebRtcTransport.ListenIndividualT>(element.GetRawText(), options);
                    case Listen.ListenServer:
                        return JsonSerializer.Deserialize<FBS.WebRtcTransport.ListenServerT>(element.GetRawText(), options);
                    default:
                        throw new NotSupportedException();
                }
            }

            private void SerializeListenUnionValue(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
            {
                switch(value)
                {
                    case FBS.WebRtcTransport.ListenIndividualT individual:
                        JsonSerializer.Serialize(writer, individual, options);
                        break;
                    case FBS.WebRtcTransport.ListenServerT server:
                        JsonSerializer.Serialize(writer, server, options);
                        break;
                    default:
                        throw new NotSupportedException();
                }
            }
        }
    }
}
