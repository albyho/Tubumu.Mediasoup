// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FBS.PlainTransport
{
    using Google.FlatBuffers;
    using System.Text.Json.Serialization;

    public struct RtcpTupleNotification : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static RtcpTupleNotification GetRootAsRtcpTupleNotification(ByteBuffer _bb) { return GetRootAsRtcpTupleNotification(_bb, new RtcpTupleNotification()); }
        public static RtcpTupleNotification GetRootAsRtcpTupleNotification(ByteBuffer _bb, RtcpTupleNotification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public RtcpTupleNotification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Transport.Tuple? Tuple { get { int o = __p.__offset(4); return o != 0 ? (FBS.Transport.Tuple?)(new FBS.Transport.Tuple()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<FBS.PlainTransport.RtcpTupleNotification> CreateRtcpTupleNotification(FlatBufferBuilder builder,
            Offset<FBS.Transport.Tuple> tupleOffset = default(Offset<FBS.Transport.Tuple>))
        {
            builder.StartTable(1);
            RtcpTupleNotification.AddTuple(builder, tupleOffset);
            return RtcpTupleNotification.EndRtcpTupleNotification(builder);
        }

        public static void StartRtcpTupleNotification(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddTuple(FlatBufferBuilder builder, Offset<FBS.Transport.Tuple> tupleOffset) { builder.AddOffset(0, tupleOffset.Value, 0); }
        public static Offset<FBS.PlainTransport.RtcpTupleNotification> EndRtcpTupleNotification(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // tuple
            return new Offset<FBS.PlainTransport.RtcpTupleNotification>(o);
        }
        public RtcpTupleNotificationT UnPack()
        {
            var _o = new RtcpTupleNotificationT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(RtcpTupleNotificationT _o)
        {
            _o.Tuple = this.Tuple.HasValue ? this.Tuple.Value.UnPack() : null;
        }
        public static Offset<FBS.PlainTransport.RtcpTupleNotification> Pack(FlatBufferBuilder builder, RtcpTupleNotificationT _o)
        {
            if(_o == null)
                return default(Offset<FBS.PlainTransport.RtcpTupleNotification>);
            var _tuple = _o.Tuple == null ? default(Offset<FBS.Transport.Tuple>) : FBS.Transport.Tuple.Pack(builder, _o.Tuple);
            return CreateRtcpTupleNotification(
              builder,
              _tuple);
        }
    }
}
