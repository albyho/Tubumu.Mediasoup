// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FBS.PlainTransport
{
    using System;
    using System.Text.Json.Serialization;
    using Google.FlatBuffers;

    public struct ConnectRequest : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static ConnectRequest GetRootAsConnectRequest(ByteBuffer _bb) { return GetRootAsConnectRequest(_bb, new ConnectRequest()); }
        public static ConnectRequest GetRootAsConnectRequest(ByteBuffer _bb, ConnectRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public ConnectRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Ip { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIpBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetIpBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetIpArray() { return __p.__vector_as_array<byte>(4); }
        public ushort? Port { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort?)null; } }
        public ushort? RtcpPort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort?)null; } }
        public FBS.SrtpParameters.SrtpParameters? SrtpParameters { get { int o = __p.__offset(10); return o != 0 ? (FBS.SrtpParameters.SrtpParameters?)(new FBS.SrtpParameters.SrtpParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<FBS.PlainTransport.ConnectRequest> CreateConnectRequest(FlatBufferBuilder builder,
            StringOffset ipOffset = default(StringOffset),
            ushort? port = null,
            ushort? rtcp_port = null,
            Offset<FBS.SrtpParameters.SrtpParameters> srtp_parametersOffset = default(Offset<FBS.SrtpParameters.SrtpParameters>))
        {
            builder.StartTable(4);
            ConnectRequest.AddSrtpParameters(builder, srtp_parametersOffset);
            ConnectRequest.AddIp(builder, ipOffset);
            ConnectRequest.AddRtcpPort(builder, rtcp_port);
            ConnectRequest.AddPort(builder, port);
            return ConnectRequest.EndConnectRequest(builder);
        }

        public static void StartConnectRequest(FlatBufferBuilder builder) { builder.StartTable(4); }
        public static void AddIp(FlatBufferBuilder builder, StringOffset ipOffset) { builder.AddOffset(0, ipOffset.Value, 0); }
        public static void AddPort(FlatBufferBuilder builder, ushort? port) { builder.AddUshort(1, port); }
        public static void AddRtcpPort(FlatBufferBuilder builder, ushort? rtcpPort) { builder.AddUshort(2, rtcpPort); }
        public static void AddSrtpParameters(FlatBufferBuilder builder, Offset<FBS.SrtpParameters.SrtpParameters> srtpParametersOffset) { builder.AddOffset(3, srtpParametersOffset.Value, 0); }
        public static Offset<FBS.PlainTransport.ConnectRequest> EndConnectRequest(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.PlainTransport.ConnectRequest>(o);
        }
        public ConnectRequestT UnPack()
        {
            var _o = new ConnectRequestT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(ConnectRequestT _o)
        {
            _o.Ip = this.Ip;
            _o.Port = this.Port;
            _o.RtcpPort = this.RtcpPort;
            _o.SrtpParameters = this.SrtpParameters.HasValue ? this.SrtpParameters.Value.UnPack() : null;
        }
        public static Offset<FBS.PlainTransport.ConnectRequest> Pack(FlatBufferBuilder builder, ConnectRequestT _o)
        {
            if(_o == null)
                return default(Offset<FBS.PlainTransport.ConnectRequest>);
            var _ip = _o.Ip == null ? default(StringOffset) : builder.CreateString(_o.Ip);
            var _srtp_parameters = _o.SrtpParameters == null ? default(Offset<FBS.SrtpParameters.SrtpParameters>) : FBS.SrtpParameters.SrtpParameters.Pack(builder, _o.SrtpParameters);
            return CreateConnectRequest(
              builder,
              _ip,
              _o.Port,
              _o.RtcpPort,
              _srtp_parameters);
        }
    }

    public class ConnectRequestT
    {
        [JsonPropertyName("ip")]
        public string Ip { get; set; }
        [JsonPropertyName("port")]
        public ushort? Port { get; set; }
        [JsonPropertyName("rtcp_port")]
        public ushort? RtcpPort { get; set; }
        [JsonPropertyName("srtp_parameters")]
        public FBS.SrtpParameters.SrtpParametersT SrtpParameters { get; set; }

        public ConnectRequestT()
        {
            this.Ip = null;
            this.Port = null;
            this.RtcpPort = null;
            this.SrtpParameters = null;
        }
    }
}
