// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Text.Json.Serialization;
using Google.FlatBuffers;

namespace FBS.AudioLevelObserver
{
    public struct Volume : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static Volume GetRootAsVolume(ByteBuffer _bb) { return GetRootAsVolume(_bb, new Volume()); }
        public static Volume GetRootAsVolume(ByteBuffer _bb, Volume obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Volume __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string ProducerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProducerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetProducerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetProducerIdArray() { return __p.__vector_as_array<byte>(4); }
        public sbyte Volume_ { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

        public static Offset<FBS.AudioLevelObserver.Volume> CreateVolume(FlatBufferBuilder builder,
            StringOffset producer_idOffset = default(StringOffset),
            sbyte volume = 0)
        {
            builder.StartTable(2);
            Volume.AddProducerId(builder, producer_idOffset);
            Volume.AddVolume(builder, volume);
            return Volume.EndVolume(builder);
        }

        public static void StartVolume(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddProducerId(FlatBufferBuilder builder, StringOffset producerIdOffset) { builder.AddOffset(0, producerIdOffset.Value, 0); }
        public static void AddVolume(FlatBufferBuilder builder, sbyte volume) { builder.AddSbyte(1, volume, 0); }
        public static Offset<FBS.AudioLevelObserver.Volume> EndVolume(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // producer_id
            return new Offset<FBS.AudioLevelObserver.Volume>(o);
        }
        public VolumeT UnPack()
        {
            var _o = new VolumeT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(VolumeT _o)
        {
            _o.ProducerId = this.ProducerId;
            _o.Volume_ = this.Volume_;
        }
        public static Offset<FBS.AudioLevelObserver.Volume> Pack(FlatBufferBuilder builder, VolumeT _o)
        {
            if(_o == null)
                return default(Offset<FBS.AudioLevelObserver.Volume>);
            var _producer_id = _o.ProducerId == null ? default(StringOffset) : builder.CreateString(_o.ProducerId);
            return CreateVolume(
              builder,
              _producer_id,
              _o.Volume_);
        }
    }
}
