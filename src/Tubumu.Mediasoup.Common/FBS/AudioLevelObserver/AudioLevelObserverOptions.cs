// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.AudioLevelObserver
{
    public struct AudioLevelObserverOptions : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static AudioLevelObserverOptions GetRootAsAudioLevelObserverOptions(ByteBuffer _bb) { return GetRootAsAudioLevelObserverOptions(_bb, new AudioLevelObserverOptions()); }
        public static AudioLevelObserverOptions GetRootAsAudioLevelObserverOptions(ByteBuffer _bb, AudioLevelObserverOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public AudioLevelObserverOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public ushort MaxEntries { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
        public sbyte Threshold { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
        public ushort Interval { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

        public static Offset<FBS.AudioLevelObserver.AudioLevelObserverOptions> CreateAudioLevelObserverOptions(FlatBufferBuilder builder,
            ushort max_entries = 0,
            sbyte threshold = 0,
            ushort interval = 0)
        {
            builder.StartTable(3);
            AudioLevelObserverOptions.AddInterval(builder, interval);
            AudioLevelObserverOptions.AddMaxEntries(builder, max_entries);
            AudioLevelObserverOptions.AddThreshold(builder, threshold);
            return AudioLevelObserverOptions.EndAudioLevelObserverOptions(builder);
        }

        public static void StartAudioLevelObserverOptions(FlatBufferBuilder builder) { builder.StartTable(3); }
        public static void AddMaxEntries(FlatBufferBuilder builder, ushort maxEntries) { builder.AddUshort(0, maxEntries, 0); }
        public static void AddThreshold(FlatBufferBuilder builder, sbyte threshold) { builder.AddSbyte(1, threshold, 0); }
        public static void AddInterval(FlatBufferBuilder builder, ushort interval) { builder.AddUshort(2, interval, 0); }
        public static Offset<FBS.AudioLevelObserver.AudioLevelObserverOptions> EndAudioLevelObserverOptions(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.AudioLevelObserver.AudioLevelObserverOptions>(o);
        }
        public AudioLevelObserverOptionsT UnPack()
        {
            var _o = new AudioLevelObserverOptionsT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(AudioLevelObserverOptionsT _o)
        {
            _o.MaxEntries = this.MaxEntries;
            _o.Threshold = this.Threshold;
            _o.Interval = this.Interval;
        }
        public static Offset<FBS.AudioLevelObserver.AudioLevelObserverOptions> Pack(FlatBufferBuilder builder, AudioLevelObserverOptionsT _o)
        {
            if(_o == null)
                return default(Offset<FBS.AudioLevelObserver.AudioLevelObserverOptions>);
            return CreateAudioLevelObserverOptions(
              builder,
              _o.MaxEntries,
              _o.Threshold,
              _o.Interval);
        }
    }

    public class AudioLevelObserverOptionsT
    {
        [JsonPropertyName("max_entries")]
        public ushort MaxEntries { get; set; }
        [JsonPropertyName("threshold")]
        public sbyte Threshold { get; set; }
        [JsonPropertyName("interval")]
        public ushort Interval { get; set; }

        public AudioLevelObserverOptionsT()
        {
            this.MaxEntries = 0;
            this.Threshold = 0;
            this.Interval = 0;
        }
    }
}
