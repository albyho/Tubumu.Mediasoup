// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FBS.RtpPacket
{

  using System;
  using System.Collections.Generic;
  using Google.FlatBuffers;
  using System.Text.Json.Serialization;

  public struct Dump : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
    public static Dump GetRootAsDump( ByteBuffer _bb ) { return GetRootAsDump( _bb, new Dump() ); }
    public static Dump GetRootAsDump( ByteBuffer _bb, Dump obj ) { return (obj.__assign( _bb.GetInt( _bb.Position ) + _bb.Position, _bb )); }
    public void __init( int _i, ByteBuffer _bb ) { __p = new Table( _i, _bb ); }
    public Dump __assign( int _i, ByteBuffer _bb ) { __init( _i, _bb ); return this; }

    public byte PayloadType { get { int o = __p.__offset( 4 ); return o != 0 ? __p.bb.Get( o + __p.bb_pos ) : ( byte ) 0; } }
    public ushort SequenceNumber { get { int o = __p.__offset( 6 ); return o != 0 ? __p.bb.GetUshort( o + __p.bb_pos ) : ( ushort ) 0; } }
    public uint Timestamp { get { int o = __p.__offset( 8 ); return o != 0 ? __p.bb.GetUint( o + __p.bb_pos ) : ( uint ) 0; } }
    public bool Marker { get { int o = __p.__offset( 10 ); return o != 0 ? 0 != __p.bb.Get( o + __p.bb_pos ) : ( bool ) false; } }
    public uint Ssrc { get { int o = __p.__offset( 12 ); return o != 0 ? __p.bb.GetUint( o + __p.bb_pos ) : ( uint ) 0; } }
    public bool IsKeyFrame { get { int o = __p.__offset( 14 ); return o != 0 ? 0 != __p.bb.Get( o + __p.bb_pos ) : ( bool ) false; } }
    public ulong Size { get { int o = __p.__offset( 16 ); return o != 0 ? __p.bb.GetUlong( o + __p.bb_pos ) : ( ulong ) 0; } }
    public ulong PayloadSize { get { int o = __p.__offset( 18 ); return o != 0 ? __p.bb.GetUlong( o + __p.bb_pos ) : ( ulong ) 0; } }
    public byte SpatialLayer { get { int o = __p.__offset( 20 ); return o != 0 ? __p.bb.Get( o + __p.bb_pos ) : ( byte ) 0; } }
    public byte TemporalLayer { get { int o = __p.__offset( 22 ); return o != 0 ? __p.bb.Get( o + __p.bb_pos ) : ( byte ) 0; } }
    public string Mid { get { int o = __p.__offset( 24 ); return o != 0 ? __p.__string( o + __p.bb_pos ) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMidBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
    public ArraySegment<byte>? GetMidBytes() { return __p.__vector_as_arraysegment( 24 ); }
#endif
    public byte[] GetMidArray() { return __p.__vector_as_array<byte>( 24 ); }
    public string Rid { get { int o = __p.__offset( 26 ); return o != 0 ? __p.__string( o + __p.bb_pos ) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRidBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
    public ArraySegment<byte>? GetRidBytes() { return __p.__vector_as_arraysegment( 26 ); }
#endif
    public byte[] GetRidArray() { return __p.__vector_as_array<byte>( 26 ); }
    public string Rrid { get { int o = __p.__offset( 28 ); return o != 0 ? __p.__string( o + __p.bb_pos ) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRridBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
    public ArraySegment<byte>? GetRridBytes() { return __p.__vector_as_arraysegment( 28 ); }
#endif
    public byte[] GetRridArray() { return __p.__vector_as_array<byte>( 28 ); }
    public ushort? WideSequenceNumber { get { int o = __p.__offset( 30 ); return o != 0 ? __p.bb.GetUshort( o + __p.bb_pos ) : ( ushort? ) null; } }

    public static Offset<FBS.RtpPacket.Dump> CreateDump( FlatBufferBuilder builder,
        byte payload_type = 0,
        ushort sequence_number = 0,
        uint timestamp = 0,
        bool marker = false,
        uint ssrc = 0,
        bool is_key_frame = false,
        ulong size = 0,
        ulong payload_size = 0,
        byte spatial_layer = 0,
        byte temporal_layer = 0,
        StringOffset midOffset = default( StringOffset ),
        StringOffset ridOffset = default( StringOffset ),
        StringOffset rridOffset = default( StringOffset ),
        ushort? wide_sequence_number = null )
    {
      builder.StartTable( 14 );
      Dump.AddPayloadSize( builder, payload_size );
      Dump.AddSize( builder, size );
      Dump.AddRrid( builder, rridOffset );
      Dump.AddRid( builder, ridOffset );
      Dump.AddMid( builder, midOffset );
      Dump.AddSsrc( builder, ssrc );
      Dump.AddTimestamp( builder, timestamp );
      Dump.AddWideSequenceNumber( builder, wide_sequence_number );
      Dump.AddSequenceNumber( builder, sequence_number );
      Dump.AddTemporalLayer( builder, temporal_layer );
      Dump.AddSpatialLayer( builder, spatial_layer );
      Dump.AddIsKeyFrame( builder, is_key_frame );
      Dump.AddMarker( builder, marker );
      Dump.AddPayloadType( builder, payload_type );
      return Dump.EndDump( builder );
    }

    public static void StartDump( FlatBufferBuilder builder ) { builder.StartTable( 14 ); }
    public static void AddPayloadType( FlatBufferBuilder builder, byte payloadType ) { builder.AddByte( 0, payloadType, 0 ); }
    public static void AddSequenceNumber( FlatBufferBuilder builder, ushort sequenceNumber ) { builder.AddUshort( 1, sequenceNumber, 0 ); }
    public static void AddTimestamp( FlatBufferBuilder builder, uint timestamp ) { builder.AddUint( 2, timestamp, 0 ); }
    public static void AddMarker( FlatBufferBuilder builder, bool marker ) { builder.AddBool( 3, marker, false ); }
    public static void AddSsrc( FlatBufferBuilder builder, uint ssrc ) { builder.AddUint( 4, ssrc, 0 ); }
    public static void AddIsKeyFrame( FlatBufferBuilder builder, bool isKeyFrame ) { builder.AddBool( 5, isKeyFrame, false ); }
    public static void AddSize( FlatBufferBuilder builder, ulong size ) { builder.AddUlong( 6, size, 0 ); }
    public static void AddPayloadSize( FlatBufferBuilder builder, ulong payloadSize ) { builder.AddUlong( 7, payloadSize, 0 ); }
    public static void AddSpatialLayer( FlatBufferBuilder builder, byte spatialLayer ) { builder.AddByte( 8, spatialLayer, 0 ); }
    public static void AddTemporalLayer( FlatBufferBuilder builder, byte temporalLayer ) { builder.AddByte( 9, temporalLayer, 0 ); }
    public static void AddMid( FlatBufferBuilder builder, StringOffset midOffset ) { builder.AddOffset( 10, midOffset.Value, 0 ); }
    public static void AddRid( FlatBufferBuilder builder, StringOffset ridOffset ) { builder.AddOffset( 11, ridOffset.Value, 0 ); }
    public static void AddRrid( FlatBufferBuilder builder, StringOffset rridOffset ) { builder.AddOffset( 12, rridOffset.Value, 0 ); }
    public static void AddWideSequenceNumber( FlatBufferBuilder builder, ushort? wideSequenceNumber ) { builder.AddUshort( 13, wideSequenceNumber ); }
    public static Offset<FBS.RtpPacket.Dump> EndDump( FlatBufferBuilder builder )
    {
      int o = builder.EndTable();
      return new Offset<FBS.RtpPacket.Dump>( o );
    }
    public DumpT UnPack()
    {
      var _o = new DumpT();
      this.UnPackTo( _o );
      return _o;
    }
    public void UnPackTo( DumpT _o )
    {
      _o.PayloadType = this.PayloadType;
      _o.SequenceNumber = this.SequenceNumber;
      _o.Timestamp = this.Timestamp;
      _o.Marker = this.Marker;
      _o.Ssrc = this.Ssrc;
      _o.IsKeyFrame = this.IsKeyFrame;
      _o.Size = this.Size;
      _o.PayloadSize = this.PayloadSize;
      _o.SpatialLayer = this.SpatialLayer;
      _o.TemporalLayer = this.TemporalLayer;
      _o.Mid = this.Mid;
      _o.Rid = this.Rid;
      _o.Rrid = this.Rrid;
      _o.WideSequenceNumber = this.WideSequenceNumber;
    }
    public static Offset<FBS.RtpPacket.Dump> Pack( FlatBufferBuilder builder, DumpT _o )
    {
      if ( _o == null )
        return default( Offset<FBS.RtpPacket.Dump> );
      var _mid = _o.Mid == null ? default( StringOffset ) : builder.CreateString( _o.Mid );
      var _rid = _o.Rid == null ? default( StringOffset ) : builder.CreateString( _o.Rid );
      var _rrid = _o.Rrid == null ? default( StringOffset ) : builder.CreateString( _o.Rrid );
      return CreateDump(
        builder,
        _o.PayloadType,
        _o.SequenceNumber,
        _o.Timestamp,
        _o.Marker,
        _o.Ssrc,
        _o.IsKeyFrame,
        _o.Size,
        _o.PayloadSize,
        _o.SpatialLayer,
        _o.TemporalLayer,
        _mid,
        _rid,
        _rrid,
        _o.WideSequenceNumber );
    }
  }

  public class DumpT
  {
    [JsonPropertyName( "payload_type" )]
    public byte PayloadType { get; set; }
    [JsonPropertyName( "sequence_number" )]
    public ushort SequenceNumber { get; set; }
    [JsonPropertyName( "timestamp" )]
    public uint Timestamp { get; set; }
    [JsonPropertyName( "marker" )]
    public bool Marker { get; set; }
    [JsonPropertyName( "ssrc" )]
    public uint Ssrc { get; set; }
    [JsonPropertyName( "is_key_frame" )]
    public bool IsKeyFrame { get; set; }
    [JsonPropertyName( "size" )]
    public ulong Size { get; set; }
    [JsonPropertyName( "payload_size" )]
    public ulong PayloadSize { get; set; }
    [JsonPropertyName( "spatial_layer" )]
    public byte SpatialLayer { get; set; }
    [JsonPropertyName( "temporal_layer" )]
    public byte TemporalLayer { get; set; }
    [JsonPropertyName( "mid" )]
    public string Mid { get; set; }
    [JsonPropertyName( "rid" )]
    public string Rid { get; set; }
    [JsonPropertyName( "rrid" )]
    public string Rrid { get; set; }
    [JsonPropertyName( "wide_sequence_number" )]
    public ushort? WideSequenceNumber { get; set; }

    public DumpT()
    {
      this.PayloadType = 0;
      this.SequenceNumber = 0;
      this.Timestamp = 0;
      this.Marker = false;
      this.Ssrc = 0;
      this.IsKeyFrame = false;
      this.Size = 0;
      this.PayloadSize = 0;
      this.SpatialLayer = 0;
      this.TemporalLayer = 0;
      this.Mid = null;
      this.Rid = null;
      this.Rrid = null;
      this.WideSequenceNumber = null;
    }
  }


}
