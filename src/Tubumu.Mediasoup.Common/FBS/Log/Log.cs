// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.Log
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct Log : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static Log GetRootAsLog(ByteBuffer _bb) { return GetRootAsLog(_bb, new Log()); }
        public static Log GetRootAsLog(ByteBuffer _bb, Log obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Log __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Data { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }

        public static Offset<FBS.Log.Log> CreateLog(FlatBufferBuilder builder,
            StringOffset dataOffset = default(StringOffset))
        {
            builder.StartTable(1);
            Log.AddData(builder, dataOffset);
            return Log.EndLog(builder);
        }

        public static void StartLog(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
        public static Offset<FBS.Log.Log> EndLog(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // data
            return new Offset<FBS.Log.Log>(o);
        }
        public LogT UnPack()
        {
            var _o = new LogT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(LogT _o)
        {
            _o.Data = this.Data;
        }
        public static Offset<FBS.Log.Log> Pack(FlatBufferBuilder builder, LogT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Log.Log>);
            var _data = _o.Data == null ? default(StringOffset) : builder.CreateString(_o.Data);
            return CreateLog(
              builder,
              _data);
        }
    }

    public class LogT
    {
        public string Data { get; set; }

        public LogT()
        {
            this.Data = null;
        }
    }


    static public class LogVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyString(tablePos, 4 /*Data*/, true)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
