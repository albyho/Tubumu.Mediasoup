// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.Consumer
{
    public struct ConsumerDump : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static ConsumerDump GetRootAsConsumerDump(ByteBuffer _bb) { return GetRootAsConsumerDump(_bb, new ConsumerDump()); }
        public static ConsumerDump GetRootAsConsumerDump(ByteBuffer _bb, ConsumerDump obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public ConsumerDump __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Consumer.BaseConsumerDump? Base { get { int o = __p.__offset(4); return o != 0 ? (FBS.Consumer.BaseConsumerDump?)(new FBS.Consumer.BaseConsumerDump()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.RtpStream.Dump? RtpStreams(int j) { int o = __p.__offset(6); return o != 0 ? (FBS.RtpStream.Dump?)(new FBS.RtpStream.Dump()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int RtpStreamsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
        public short? PreferredSpatialLayer { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short?)null; } }
        public short? TargetSpatialLayer { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short?)null; } }
        public short? CurrentSpatialLayer { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short?)null; } }
        public short? PreferredTemporalLayer { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short?)null; } }
        public short? TargetTemporalLayer { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short?)null; } }
        public short? CurrentTemporalLayer { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short?)null; } }

        public static Offset<FBS.Consumer.ConsumerDump> CreateConsumerDump(FlatBufferBuilder builder,
            Offset<FBS.Consumer.BaseConsumerDump> @baseOffset = default(Offset<FBS.Consumer.BaseConsumerDump>),
            VectorOffset rtp_streamsOffset = default(VectorOffset),
            short? preferred_spatial_layer = null,
            short? target_spatial_layer = null,
            short? current_spatial_layer = null,
            short? preferred_temporal_layer = null,
            short? target_temporal_layer = null,
            short? current_temporal_layer = null)
        {
            builder.StartTable(8);
            ConsumerDump.AddRtpStreams(builder, rtp_streamsOffset);
            ConsumerDump.AddBase(builder, @baseOffset);
            ConsumerDump.AddCurrentTemporalLayer(builder, current_temporal_layer);
            ConsumerDump.AddTargetTemporalLayer(builder, target_temporal_layer);
            ConsumerDump.AddPreferredTemporalLayer(builder, preferred_temporal_layer);
            ConsumerDump.AddCurrentSpatialLayer(builder, current_spatial_layer);
            ConsumerDump.AddTargetSpatialLayer(builder, target_spatial_layer);
            ConsumerDump.AddPreferredSpatialLayer(builder, preferred_spatial_layer);
            return ConsumerDump.EndConsumerDump(builder);
        }

        public static void StartConsumerDump(FlatBufferBuilder builder) { builder.StartTable(8); }
        public static void AddBase(FlatBufferBuilder builder, Offset<FBS.Consumer.BaseConsumerDump> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
        public static void AddRtpStreams(FlatBufferBuilder builder, VectorOffset rtpStreamsOffset) { builder.AddOffset(1, rtpStreamsOffset.Value, 0); }
        public static VectorOffset CreateRtpStreamsVector(FlatBufferBuilder builder, Offset<FBS.RtpStream.Dump>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateRtpStreamsVectorBlock(FlatBufferBuilder builder, Offset<FBS.RtpStream.Dump>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateRtpStreamsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.RtpStream.Dump>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateRtpStreamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.RtpStream.Dump>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartRtpStreamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddPreferredSpatialLayer(FlatBufferBuilder builder, short? preferredSpatialLayer) { builder.AddShort(2, preferredSpatialLayer); }
        public static void AddTargetSpatialLayer(FlatBufferBuilder builder, short? targetSpatialLayer) { builder.AddShort(3, targetSpatialLayer); }
        public static void AddCurrentSpatialLayer(FlatBufferBuilder builder, short? currentSpatialLayer) { builder.AddShort(4, currentSpatialLayer); }
        public static void AddPreferredTemporalLayer(FlatBufferBuilder builder, short? preferredTemporalLayer) { builder.AddShort(5, preferredTemporalLayer); }
        public static void AddTargetTemporalLayer(FlatBufferBuilder builder, short? targetTemporalLayer) { builder.AddShort(6, targetTemporalLayer); }
        public static void AddCurrentTemporalLayer(FlatBufferBuilder builder, short? currentTemporalLayer) { builder.AddShort(7, currentTemporalLayer); }
        public static Offset<FBS.Consumer.ConsumerDump> EndConsumerDump(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // base
            builder.Required(o, 6);  // rtp_streams
            return new Offset<FBS.Consumer.ConsumerDump>(o);
        }
        public ConsumerDumpT UnPack()
        {
            var _o = new ConsumerDumpT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(ConsumerDumpT _o)
        {
            _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
            _o.RtpStreams = new List<FBS.RtpStream.DumpT>();
            for(var _j = 0; _j < this.RtpStreamsLength; ++_j)
            { _o.RtpStreams.Add(this.RtpStreams(_j).HasValue ? this.RtpStreams(_j).Value.UnPack() : null); }
            _o.PreferredSpatialLayer = this.PreferredSpatialLayer;
            _o.TargetSpatialLayer = this.TargetSpatialLayer;
            _o.CurrentSpatialLayer = this.CurrentSpatialLayer;
            _o.PreferredTemporalLayer = this.PreferredTemporalLayer;
            _o.TargetTemporalLayer = this.TargetTemporalLayer;
            _o.CurrentTemporalLayer = this.CurrentTemporalLayer;
        }
        public static Offset<FBS.Consumer.ConsumerDump> Pack(FlatBufferBuilder builder, ConsumerDumpT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Consumer.ConsumerDump>);
            var _base = _o.Base == null ? default(Offset<FBS.Consumer.BaseConsumerDump>) : FBS.Consumer.BaseConsumerDump.Pack(builder, _o.Base);
            var _rtp_streams = default(VectorOffset);
            if(_o.RtpStreams != null)
            {
                var __rtp_streams = new Offset<FBS.RtpStream.Dump>[_o.RtpStreams.Count];
                for(var _j = 0; _j < __rtp_streams.Length; ++_j)
                { __rtp_streams[_j] = FBS.RtpStream.Dump.Pack(builder, _o.RtpStreams[_j]); }
                _rtp_streams = CreateRtpStreamsVector(builder, __rtp_streams);
            }
            return CreateConsumerDump(
              builder,
              _base,
              _rtp_streams,
              _o.PreferredSpatialLayer,
              _o.TargetSpatialLayer,
              _o.CurrentSpatialLayer,
              _o.PreferredTemporalLayer,
              _o.TargetTemporalLayer,
              _o.CurrentTemporalLayer);
        }
    }

    public class ConsumerDumpT
    {
        [JsonPropertyName("base")]
        public FBS.Consumer.BaseConsumerDumpT Base { get; set; }
        [JsonPropertyName("rtp_streams")]
        public List<FBS.RtpStream.DumpT> RtpStreams { get; set; }
        [JsonPropertyName("preferred_spatial_layer")]
        public short? PreferredSpatialLayer { get; set; }
        [JsonPropertyName("target_spatial_layer")]
        public short? TargetSpatialLayer { get; set; }
        [JsonPropertyName("current_spatial_layer")]
        public short? CurrentSpatialLayer { get; set; }
        [JsonPropertyName("preferred_temporal_layer")]
        public short? PreferredTemporalLayer { get; set; }
        [JsonPropertyName("target_temporal_layer")]
        public short? TargetTemporalLayer { get; set; }
        [JsonPropertyName("current_temporal_layer")]
        public short? CurrentTemporalLayer { get; set; }

        public ConsumerDumpT()
        {
            this.Base = null;
            this.RtpStreams = null;
            this.PreferredSpatialLayer = null;
            this.TargetSpatialLayer = null;
            this.CurrentSpatialLayer = null;
            this.PreferredTemporalLayer = null;
            this.TargetTemporalLayer = null;
            this.CurrentTemporalLayer = null;
        }
    }
}
