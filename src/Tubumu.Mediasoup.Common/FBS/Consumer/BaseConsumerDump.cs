// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.Consumer
{
    public struct BaseConsumerDump : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static BaseConsumerDump GetRootAsBaseConsumerDump(ByteBuffer _bb) { return GetRootAsBaseConsumerDump(_bb, new BaseConsumerDump()); }
        public static BaseConsumerDump GetRootAsBaseConsumerDump(ByteBuffer _bb, BaseConsumerDump obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public BaseConsumerDump __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
        public FBS.RtpParameters.Type Type { get { int o = __p.__offset(6); return o != 0 ? (FBS.RtpParameters.Type)__p.bb.Get(o + __p.bb_pos) : FBS.RtpParameters.Type.SIMPLE; } }
        public string ProducerId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProducerIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
        public ArraySegment<byte>? GetProducerIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
        public byte[] GetProducerIdArray() { return __p.__vector_as_array<byte>(8); }
        public FBS.RtpParameters.MediaKind Kind { get { int o = __p.__offset(10); return o != 0 ? (FBS.RtpParameters.MediaKind)__p.bb.Get(o + __p.bb_pos) : FBS.RtpParameters.MediaKind.AUDIO; } }
        public FBS.RtpParameters.RtpParameters? RtpParameters { get { int o = __p.__offset(12); return o != 0 ? (FBS.RtpParameters.RtpParameters?)(new FBS.RtpParameters.RtpParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.RtpParameters.RtpEncodingParameters? ConsumableRtpEncodings(int j) { int o = __p.__offset(14); return o != 0 ? (FBS.RtpParameters.RtpEncodingParameters?)(new FBS.RtpParameters.RtpEncodingParameters()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int ConsumableRtpEncodingsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
        public byte SupportedCodecPayloadTypes(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
        public int SupportedCodecPayloadTypesLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSupportedCodecPayloadTypesBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
        public ArraySegment<byte>? GetSupportedCodecPayloadTypesBytes() { return __p.__vector_as_arraysegment(16); }
#endif
        public byte[] GetSupportedCodecPayloadTypesArray() { return __p.__vector_as_array<byte>(16); }
        public FBS.Consumer.TraceEventType TraceEventTypes(int j) { int o = __p.__offset(18); return o != 0 ? (FBS.Consumer.TraceEventType)__p.bb.Get(__p.__vector(o) + j * 1) : (FBS.Consumer.TraceEventType)0; }
        public int TraceEventTypesLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FBS.Consumer.TraceEventType> GetTraceEventTypesBytes() { return __p.__vector_as_span<FBS.Consumer.TraceEventType>(18, 1); }
#else
        public ArraySegment<byte>? GetTraceEventTypesBytes() { return __p.__vector_as_arraysegment(18); }
#endif
        public FBS.Consumer.TraceEventType[] GetTraceEventTypesArray() { int o = __p.__offset(18); if(o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FBS.Consumer.TraceEventType[] a = new FBS.Consumer.TraceEventType[l]; for(int i = 0; i < l; i++) { a[i] = (FBS.Consumer.TraceEventType)__p.bb.Get(p + i * 1); } return a; }
        public bool Paused { get { int o = __p.__offset(20); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public bool ProducerPaused { get { int o = __p.__offset(22); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public byte Priority { get { int o = __p.__offset(24); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

        public static Offset<FBS.Consumer.BaseConsumerDump> CreateBaseConsumerDump(FlatBufferBuilder builder,
            StringOffset idOffset = default(StringOffset),
            FBS.RtpParameters.Type type = FBS.RtpParameters.Type.SIMPLE,
            StringOffset producer_idOffset = default(StringOffset),
            FBS.RtpParameters.MediaKind kind = FBS.RtpParameters.MediaKind.AUDIO,
            Offset<FBS.RtpParameters.RtpParameters> rtp_parametersOffset = default(Offset<FBS.RtpParameters.RtpParameters>),
            VectorOffset consumable_rtp_encodingsOffset = default(VectorOffset),
            VectorOffset supported_codec_payload_typesOffset = default(VectorOffset),
            VectorOffset trace_event_typesOffset = default(VectorOffset),
            bool paused = false,
            bool producer_paused = false,
            byte priority = 0)
        {
            builder.StartTable(11);
            BaseConsumerDump.AddTraceEventTypes(builder, trace_event_typesOffset);
            BaseConsumerDump.AddSupportedCodecPayloadTypes(builder, supported_codec_payload_typesOffset);
            BaseConsumerDump.AddConsumableRtpEncodings(builder, consumable_rtp_encodingsOffset);
            BaseConsumerDump.AddRtpParameters(builder, rtp_parametersOffset);
            BaseConsumerDump.AddProducerId(builder, producer_idOffset);
            BaseConsumerDump.AddId(builder, idOffset);
            BaseConsumerDump.AddPriority(builder, priority);
            BaseConsumerDump.AddProducerPaused(builder, producer_paused);
            BaseConsumerDump.AddPaused(builder, paused);
            BaseConsumerDump.AddKind(builder, kind);
            BaseConsumerDump.AddType(builder, type);
            return BaseConsumerDump.EndBaseConsumerDump(builder);
        }

        public static void StartBaseConsumerDump(FlatBufferBuilder builder) { builder.StartTable(11); }
        public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
        public static void AddType(FlatBufferBuilder builder, FBS.RtpParameters.Type type) { builder.AddByte(1, (byte)type, 0); }
        public static void AddProducerId(FlatBufferBuilder builder, StringOffset producerIdOffset) { builder.AddOffset(2, producerIdOffset.Value, 0); }
        public static void AddKind(FlatBufferBuilder builder, FBS.RtpParameters.MediaKind kind) { builder.AddByte(3, (byte)kind, 0); }
        public static void AddRtpParameters(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpParameters> rtpParametersOffset) { builder.AddOffset(4, rtpParametersOffset.Value, 0); }
        public static void AddConsumableRtpEncodings(FlatBufferBuilder builder, VectorOffset consumableRtpEncodingsOffset) { builder.AddOffset(5, consumableRtpEncodingsOffset.Value, 0); }
        public static VectorOffset CreateConsumableRtpEncodingsVector(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpEncodingParameters>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateConsumableRtpEncodingsVectorBlock(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpEncodingParameters>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateConsumableRtpEncodingsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.RtpParameters.RtpEncodingParameters>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateConsumableRtpEncodingsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.RtpParameters.RtpEncodingParameters>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartConsumableRtpEncodingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddSupportedCodecPayloadTypes(FlatBufferBuilder builder, VectorOffset supportedCodecPayloadTypesOffset) { builder.AddOffset(6, supportedCodecPayloadTypesOffset.Value, 0); }
        public static VectorOffset CreateSupportedCodecPayloadTypesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for(int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateSupportedCodecPayloadTypesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateSupportedCodecPayloadTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateSupportedCodecPayloadTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartSupportedCodecPayloadTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static void AddTraceEventTypes(FlatBufferBuilder builder, VectorOffset traceEventTypesOffset) { builder.AddOffset(7, traceEventTypesOffset.Value, 0); }
        public static VectorOffset CreateTraceEventTypesVector(FlatBufferBuilder builder, FBS.Consumer.TraceEventType[] data) { builder.StartVector(1, data.Length, 1); for(int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
        public static VectorOffset CreateTraceEventTypesVectorBlock(FlatBufferBuilder builder, FBS.Consumer.TraceEventType[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateTraceEventTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<FBS.Consumer.TraceEventType> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateTraceEventTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FBS.Consumer.TraceEventType>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartTraceEventTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static void AddPaused(FlatBufferBuilder builder, bool paused) { builder.AddBool(8, paused, false); }
        public static void AddProducerPaused(FlatBufferBuilder builder, bool producerPaused) { builder.AddBool(9, producerPaused, false); }
        public static void AddPriority(FlatBufferBuilder builder, byte priority) { builder.AddByte(10, priority, 0); }
        public static Offset<FBS.Consumer.BaseConsumerDump> EndBaseConsumerDump(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // id
            builder.Required(o, 8);  // producer_id
            builder.Required(o, 12);  // rtp_parameters
            builder.Required(o, 14);  // consumable_rtp_encodings
            builder.Required(o, 16);  // supported_codec_payload_types
            builder.Required(o, 18);  // trace_event_types
            return new Offset<FBS.Consumer.BaseConsumerDump>(o);
        }
        public BaseConsumerDumpT UnPack()
        {
            var _o = new BaseConsumerDumpT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(BaseConsumerDumpT _o)
        {
            _o.Id = this.Id;
            _o.Type = this.Type;
            _o.ProducerId = this.ProducerId;
            _o.Kind = this.Kind;
            _o.RtpParameters = this.RtpParameters.HasValue ? this.RtpParameters.Value.UnPack() : null;
            _o.ConsumableRtpEncodings = new List<FBS.RtpParameters.RtpEncodingParametersT>();
            for(var _j = 0; _j < this.ConsumableRtpEncodingsLength; ++_j)
            { _o.ConsumableRtpEncodings.Add(this.ConsumableRtpEncodings(_j).HasValue ? this.ConsumableRtpEncodings(_j).Value.UnPack() : null); }
            _o.SupportedCodecPayloadTypes = new List<byte>();
            for(var _j = 0; _j < this.SupportedCodecPayloadTypesLength; ++_j)
            { _o.SupportedCodecPayloadTypes.Add(this.SupportedCodecPayloadTypes(_j)); }
            _o.TraceEventTypes = new List<FBS.Consumer.TraceEventType>();
            for(var _j = 0; _j < this.TraceEventTypesLength; ++_j)
            { _o.TraceEventTypes.Add(this.TraceEventTypes(_j)); }
            _o.Paused = this.Paused;
            _o.ProducerPaused = this.ProducerPaused;
            _o.Priority = this.Priority;
        }
        public static Offset<FBS.Consumer.BaseConsumerDump> Pack(FlatBufferBuilder builder, BaseConsumerDumpT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Consumer.BaseConsumerDump>);
            var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
            var _producer_id = _o.ProducerId == null ? default(StringOffset) : builder.CreateString(_o.ProducerId);
            var _rtp_parameters = _o.RtpParameters == null ? default(Offset<FBS.RtpParameters.RtpParameters>) : FBS.RtpParameters.RtpParameters.Pack(builder, _o.RtpParameters);
            var _consumable_rtp_encodings = default(VectorOffset);
            if(_o.ConsumableRtpEncodings != null)
            {
                var __consumable_rtp_encodings = new Offset<FBS.RtpParameters.RtpEncodingParameters>[_o.ConsumableRtpEncodings.Count];
                for(var _j = 0; _j < __consumable_rtp_encodings.Length; ++_j)
                { __consumable_rtp_encodings[_j] = FBS.RtpParameters.RtpEncodingParameters.Pack(builder, _o.ConsumableRtpEncodings[_j]); }
                _consumable_rtp_encodings = CreateConsumableRtpEncodingsVector(builder, __consumable_rtp_encodings);
            }
            var _supported_codec_payload_types = default(VectorOffset);
            if(_o.SupportedCodecPayloadTypes != null)
            {
                var __supported_codec_payload_types = _o.SupportedCodecPayloadTypes.ToArray();
                _supported_codec_payload_types = CreateSupportedCodecPayloadTypesVector(builder, __supported_codec_payload_types);
            }
            var _trace_event_types = default(VectorOffset);
            if(_o.TraceEventTypes != null)
            {
                var __trace_event_types = _o.TraceEventTypes.ToArray();
                _trace_event_types = CreateTraceEventTypesVector(builder, __trace_event_types);
            }
            return CreateBaseConsumerDump(
              builder,
              _id,
              _o.Type,
              _producer_id,
              _o.Kind,
              _rtp_parameters,
              _consumable_rtp_encodings,
              _supported_codec_payload_types,
              _trace_event_types,
              _o.Paused,
              _o.ProducerPaused,
              _o.Priority);
        }
    }
}
