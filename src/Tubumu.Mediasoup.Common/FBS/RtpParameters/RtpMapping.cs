// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.RtpParameters
{
    public struct RtpMapping : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static RtpMapping GetRootAsRtpMapping(ByteBuffer _bb) { return GetRootAsRtpMapping(_bb, new RtpMapping()); }
        public static RtpMapping GetRootAsRtpMapping(ByteBuffer _bb, RtpMapping obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public RtpMapping __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.RtpParameters.CodecMapping? Codecs(int j) { int o = __p.__offset(4); return o != 0 ? (FBS.RtpParameters.CodecMapping?)(new FBS.RtpParameters.CodecMapping()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int CodecsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
        public FBS.RtpParameters.EncodingMapping? Encodings(int j) { int o = __p.__offset(6); return o != 0 ? (FBS.RtpParameters.EncodingMapping?)(new FBS.RtpParameters.EncodingMapping()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int EncodingsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

        public static Offset<FBS.RtpParameters.RtpMapping> CreateRtpMapping(FlatBufferBuilder builder,
            VectorOffset codecsOffset = default(VectorOffset),
            VectorOffset encodingsOffset = default(VectorOffset))
        {
            builder.StartTable(2);
            RtpMapping.AddEncodings(builder, encodingsOffset);
            RtpMapping.AddCodecs(builder, codecsOffset);
            return RtpMapping.EndRtpMapping(builder);
        }

        public static void StartRtpMapping(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddCodecs(FlatBufferBuilder builder, VectorOffset codecsOffset) { builder.AddOffset(0, codecsOffset.Value, 0); }
        public static VectorOffset CreateCodecsVector(FlatBufferBuilder builder, Offset<FBS.RtpParameters.CodecMapping>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateCodecsVectorBlock(FlatBufferBuilder builder, Offset<FBS.RtpParameters.CodecMapping>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateCodecsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.RtpParameters.CodecMapping>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateCodecsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.RtpParameters.CodecMapping>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartCodecsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddEncodings(FlatBufferBuilder builder, VectorOffset encodingsOffset) { builder.AddOffset(1, encodingsOffset.Value, 0); }
        public static VectorOffset CreateEncodingsVector(FlatBufferBuilder builder, Offset<FBS.RtpParameters.EncodingMapping>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateEncodingsVectorBlock(FlatBufferBuilder builder, Offset<FBS.RtpParameters.EncodingMapping>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateEncodingsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.RtpParameters.EncodingMapping>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateEncodingsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.RtpParameters.EncodingMapping>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartEncodingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<FBS.RtpParameters.RtpMapping> EndRtpMapping(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // codecs
            builder.Required(o, 6);  // encodings
            return new Offset<FBS.RtpParameters.RtpMapping>(o);
        }
        public RtpMappingT UnPack()
        {
            var _o = new RtpMappingT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(RtpMappingT _o)
        {
            _o.Codecs = new List<FBS.RtpParameters.CodecMappingT>();
            for(var _j = 0; _j < this.CodecsLength; ++_j)
            { _o.Codecs.Add(this.Codecs(_j).HasValue ? this.Codecs(_j).Value.UnPack() : null); }
            _o.Encodings = new List<FBS.RtpParameters.EncodingMappingT>();
            for(var _j = 0; _j < this.EncodingsLength; ++_j)
            { _o.Encodings.Add(this.Encodings(_j).HasValue ? this.Encodings(_j).Value.UnPack() : null); }
        }
        public static Offset<FBS.RtpParameters.RtpMapping> Pack(FlatBufferBuilder builder, RtpMappingT _o)
        {
            if(_o == null)
                return default(Offset<FBS.RtpParameters.RtpMapping>);
            var _codecs = default(VectorOffset);
            if(_o.Codecs != null)
            {
                var __codecs = new Offset<FBS.RtpParameters.CodecMapping>[_o.Codecs.Count];
                for(var _j = 0; _j < __codecs.Length; ++_j)
                { __codecs[_j] = FBS.RtpParameters.CodecMapping.Pack(builder, _o.Codecs[_j]); }
                _codecs = CreateCodecsVector(builder, __codecs);
            }
            var _encodings = default(VectorOffset);
            if(_o.Encodings != null)
            {
                var __encodings = new Offset<FBS.RtpParameters.EncodingMapping>[_o.Encodings.Count];
                for(var _j = 0; _j < __encodings.Length; ++_j)
                { __encodings[_j] = FBS.RtpParameters.EncodingMapping.Pack(builder, _o.Encodings[_j]); }
                _encodings = CreateEncodingsVector(builder, __encodings);
            }
            return CreateRtpMapping(
              builder,
              _codecs,
              _encodings);
        }
    }

    public class RtpMappingT
    {
        [JsonPropertyName("codecs")]
        public List<FBS.RtpParameters.CodecMappingT> Codecs { get; set; }
        [JsonPropertyName("encodings")]
        public List<FBS.RtpParameters.EncodingMappingT> Encodings { get; set; }

        public RtpMappingT()
        {
            this.Codecs = null;
            this.Encodings = null;
        }
    }


}
