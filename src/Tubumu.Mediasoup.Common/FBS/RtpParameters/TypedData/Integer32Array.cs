// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using Google.FlatBuffers;

namespace FBS.RtpParameters
{
    public struct Integer32Array : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static Integer32Array GetRootAsInteger32Array(ByteBuffer _bb) { return GetRootAsInteger32Array(_bb, new Integer32Array()); }
        public static Integer32Array GetRootAsInteger32Array(ByteBuffer _bb, Integer32Array obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Integer32Array __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public int Value(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
        public int ValueLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetValueBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
        public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public int[] GetValueArray() { return __p.__vector_as_array<int>(4); }

        public static Offset<FBS.RtpParameters.Integer32Array> CreateInteger32Array(FlatBufferBuilder builder,
            VectorOffset valueOffset = default(VectorOffset))
        {
            builder.StartTable(1);
            Integer32Array.AddValue(builder, valueOffset);
            return Integer32Array.EndInteger32Array(builder);
        }

        public static void StartInteger32Array(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddValue(FlatBufferBuilder builder, VectorOffset valueOffset) { builder.AddOffset(0, valueOffset.Value, 0); }
        public static VectorOffset CreateValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<FBS.RtpParameters.Integer32Array> EndInteger32Array(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.RtpParameters.Integer32Array>(o);
        }
        public Integer32ArrayT UnPack()
        {
            var _o = new Integer32ArrayT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(Integer32ArrayT _o)
        {
            _o.Value = new List<int>();
            for(var _j = 0; _j < this.ValueLength; ++_j)
            { _o.Value.Add(this.Value(_j)); }
        }
        public static Offset<FBS.RtpParameters.Integer32Array> Pack(FlatBufferBuilder builder, Integer32ArrayT _o)
        {
            if(_o == null)
                return default(Offset<FBS.RtpParameters.Integer32Array>);
            var _value = default(VectorOffset);
            if(_o.Value != null)
            {
                var __value = _o.Value.ToArray();
                _value = CreateValueVector(builder, __value);
            }
            return CreateInteger32Array(
              builder,
              _value);
        }
    }

    public class Integer32ArrayT
    {
        public List<int> Value { get; set; }
    }
}
