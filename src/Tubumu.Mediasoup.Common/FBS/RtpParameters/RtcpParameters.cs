// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.RtpParameters
{
    public struct RtcpParameters : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static RtcpParameters GetRootAsRtcpParameters(ByteBuffer _bb) { return GetRootAsRtcpParameters(_bb, new RtcpParameters()); }
        public static RtcpParameters GetRootAsRtcpParameters(ByteBuffer _bb, RtcpParameters obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public RtcpParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Cname { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCnameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetCnameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetCnameArray() { return __p.__vector_as_array<byte>(4); }
        public bool ReducedSize { get { int o = __p.__offset(6); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)true; } }

        public static Offset<FBS.RtpParameters.RtcpParameters> CreateRtcpParameters(FlatBufferBuilder builder,
            StringOffset cnameOffset = default(StringOffset),
            bool reduced_size = true)
        {
            builder.StartTable(2);
            RtcpParameters.AddCname(builder, cnameOffset);
            RtcpParameters.AddReducedSize(builder, reduced_size);
            return RtcpParameters.EndRtcpParameters(builder);
        }

        public static void StartRtcpParameters(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddCname(FlatBufferBuilder builder, StringOffset cnameOffset) { builder.AddOffset(0, cnameOffset.Value, 0); }
        public static void AddReducedSize(FlatBufferBuilder builder, bool reducedSize) { builder.AddBool(1, reducedSize, true); }
        public static Offset<FBS.RtpParameters.RtcpParameters> EndRtcpParameters(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.RtpParameters.RtcpParameters>(o);
        }
        public RtcpParametersT UnPack()
        {
            var _o = new RtcpParametersT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(RtcpParametersT _o)
        {
            _o.Cname = this.Cname;
            _o.ReducedSize = this.ReducedSize;
        }
        public static Offset<FBS.RtpParameters.RtcpParameters> Pack(FlatBufferBuilder builder, RtcpParametersT _o)
        {
            if(_o == null)
                return default(Offset<FBS.RtpParameters.RtcpParameters>);
            var _cname = _o.Cname == null ? default(StringOffset) : builder.CreateString(_o.Cname);
            return CreateRtcpParameters(
              builder,
              _cname,
              _o.ReducedSize);
        }
    }

    public class RtcpParametersT
    {
        [JsonPropertyName("cname")]
        public string Cname { get; set; }
        [JsonPropertyName("reduced_size")]
        public bool ReducedSize { get; set; }

        public RtcpParametersT()
        {
            this.Cname = null;
            this.ReducedSize = true;
        }
    }
}
