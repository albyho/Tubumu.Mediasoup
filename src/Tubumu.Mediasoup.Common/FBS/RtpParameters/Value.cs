// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace FBS.RtpParameters
{
    public enum Value : byte
    {
        NONE = 0,

        Boolean = 1,

        Integer32 = 2,

        Double = 3,

        String = 4,

        Integer32Array = 5,
    }

    public class ValueUnion
    {
        public Value Type { get; set; }
        public object Value_ { get; set; }

        public ValueUnion()
        {
            this.Type = Value.NONE;
            this.Value_ = null;
        }

        public T As<T>() where T : class { return this.Value_ as T; }
        public FBS.RtpParameters.BooleanT AsBoolean() { return this.As<FBS.RtpParameters.BooleanT>(); }
        public static ValueUnion FromBoolean(FBS.RtpParameters.BooleanT _boolean) { return new ValueUnion { Type = Value.Boolean, Value_ = _boolean }; }
        public FBS.RtpParameters.Integer32T AsInteger32() { return this.As<FBS.RtpParameters.Integer32T>(); }
        public static ValueUnion FromInteger32(FBS.RtpParameters.Integer32T _integer32) { return new ValueUnion { Type = Value.Integer32, Value_ = _integer32 }; }
        public FBS.RtpParameters.DoubleT AsDouble() { return this.As<FBS.RtpParameters.DoubleT>(); }
        public static ValueUnion FromDouble(FBS.RtpParameters.DoubleT _double) { return new ValueUnion { Type = Value.Double, Value_ = _double }; }
        public FBS.RtpParameters.StringT AsString() { return this.As<FBS.RtpParameters.StringT>(); }
        public static ValueUnion FromString(FBS.RtpParameters.StringT _string) { return new ValueUnion { Type = Value.String, Value_ = _string }; }
        public FBS.RtpParameters.Integer32ArrayT AsInteger32Array() { return this.As<FBS.RtpParameters.Integer32ArrayT>(); }
        public static ValueUnion FromInteger32Array(FBS.RtpParameters.Integer32ArrayT _integer32array) { return new ValueUnion { Type = Value.Integer32Array, Value_ = _integer32array }; }

        public static int Pack(Google.FlatBuffers.FlatBufferBuilder builder, ValueUnion _o)
        {
            switch(_o.Type)
            {
                default:
                    return 0;
                case Value.Boolean:
                    return FBS.RtpParameters.Boolean.Pack(builder, _o.AsBoolean()).Value;
                case Value.Integer32:
                    return FBS.RtpParameters.Integer32.Pack(builder, _o.AsInteger32()).Value;
                case Value.Double:
                    return FBS.RtpParameters.Double.Pack(builder, _o.AsDouble()).Value;
                case Value.String:
                    return FBS.RtpParameters.String.Pack(builder, _o.AsString()).Value;
                case Value.Integer32Array:
                    return FBS.RtpParameters.Integer32Array.Pack(builder, _o.AsInteger32Array()).Value;
            }
        }
    }

    public class ValueUnion_JsonConverter : JsonConverterFactory
    {
        public override bool CanConvert(System.Type typeToConvert)
        {
            return typeToConvert == typeof(ValueUnion) || typeToConvert == typeof(List<ValueUnion>);
        }


        public override JsonConverter CreateConverter(System.Type typeToConvert, JsonSerializerOptions options)
        {
            if(typeToConvert == typeof(ValueUnion))
            {
                return new ValueUnionConverter();
            }

            if(typeToConvert == typeof(List<ValueUnion>))
            {
                return new ListValueUnionConverter();
            }

            return null;
        }


        private class ValueUnionConverter : JsonConverter<ValueUnion>
        {
            public override ValueUnion Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using(JsonDocument doc = JsonDocument.ParseValue(ref reader))
                {
                    var root = doc.RootElement;
                    if(root.TryGetProperty("Type", out var typeProperty))
                    {
                        Value valueType = Enum.Parse<Value>(typeProperty.GetString());
                        switch(valueType)
                        {
                            case Value.Boolean:
                                return new ValueUnion { Type = valueType, Value_ = root.GetProperty("Value").GetBoolean() };

                            case Value.Integer32:
                                return new ValueUnion { Type = valueType, Value_ = root.GetProperty("Value").GetInt32() };

                            case Value.Double:
                                return new ValueUnion { Type = valueType, Value_ = root.GetProperty("Value").GetDouble() };

                            case Value.String:
                                return new ValueUnion { Type = valueType, Value_ = root.GetProperty("Value").GetString() };

                            case Value.Integer32Array:
                                return new ValueUnion { Type = valueType, Value_ = JsonSerializer.Deserialize<int[]>(root.GetProperty("Value").GetRawText(), options) };
                        }
                    }
                }

                throw new JsonException("Invalid JSON for ValueUnion");
            }

            public override void Write(Utf8JsonWriter writer, ValueUnion value, JsonSerializerOptions options)
            {
                writer.WriteStartObject();
                writer.WriteString("Type", value.Type.ToString());
                writer.WriteStartObject("Value");

                switch(value.Type)
                {
                    case Value.Boolean:
                        writer.WriteBooleanValue((bool)value.Value_);
                        break;

                    case Value.Integer32:
                        writer.WriteNumberValue((int)value.Value_);
                        break;

                    case Value.Double:
                        writer.WriteNumberValue((double)value.Value_);
                        break;

                    case Value.String:
                        writer.WriteStringValue((string)value.Value_);
                        break;

                    case Value.Integer32Array:
                        JsonSerializer.Serialize(writer, value.Value_, options);
                        break;
                }

                writer.WriteEndObject();
                writer.WriteEndObject();
            }
        }

        private class ListValueUnionConverter : JsonConverter<List<ValueUnion>>
        {
            public override List<ValueUnion> Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
            {
                using(JsonDocument doc = JsonDocument.ParseValue(ref reader))
                {
                    if(doc.RootElement.ValueKind != JsonValueKind.Array)
                    {
                        throw new JsonException("Invalid JSON for List<ValueUnion>");
                    }

                    List<ValueUnion> result = new List<ValueUnion>();

                    foreach(var element in doc.RootElement.EnumerateArray())
                    {
                        result.Add(JsonSerializer.Deserialize<ValueUnion>(element.GetRawText(), options));
                    }

                    return result;
                }
            }

            public override void Write(Utf8JsonWriter writer, List<ValueUnion> value, JsonSerializerOptions options)
            {
                writer.WriteStartArray();

                foreach(var element in value)
                {
                    JsonSerializer.Serialize(writer, element, options);
                }

                writer.WriteEndArray();
            }
        }
    }
}
