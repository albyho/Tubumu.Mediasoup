// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using Google.FlatBuffers;

namespace FBS.RtpParameters
{
    public struct RtpParameters : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static RtpParameters GetRootAsRtpParameters(ByteBuffer _bb) { return GetRootAsRtpParameters(_bb, new RtpParameters()); }
        public static RtpParameters GetRootAsRtpParameters(ByteBuffer _bb, RtpParameters obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public RtpParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Mid { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMidBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetMidBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetMidArray() { return __p.__vector_as_array<byte>(4); }
        public FBS.RtpParameters.RtpCodecParameters? Codecs(int j) { int o = __p.__offset(6); return o != 0 ? (FBS.RtpParameters.RtpCodecParameters?)(new FBS.RtpParameters.RtpCodecParameters()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int CodecsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
        public FBS.RtpParameters.RtpHeaderExtensionParameters? HeaderExtensions(int j) { int o = __p.__offset(8); return o != 0 ? (FBS.RtpParameters.RtpHeaderExtensionParameters?)(new FBS.RtpParameters.RtpHeaderExtensionParameters()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int HeaderExtensionsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
        public FBS.RtpParameters.RtpEncodingParameters? Encodings(int j) { int o = __p.__offset(10); return o != 0 ? (FBS.RtpParameters.RtpEncodingParameters?)(new FBS.RtpParameters.RtpEncodingParameters()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int EncodingsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
        public FBS.RtpParameters.RtcpParameters? Rtcp { get { int o = __p.__offset(12); return o != 0 ? (FBS.RtpParameters.RtcpParameters?)(new FBS.RtpParameters.RtcpParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<FBS.RtpParameters.RtpParameters> CreateRtpParameters(FlatBufferBuilder builder,
            StringOffset midOffset = default(StringOffset),
            VectorOffset codecsOffset = default(VectorOffset),
            VectorOffset header_extensionsOffset = default(VectorOffset),
            VectorOffset encodingsOffset = default(VectorOffset),
            Offset<FBS.RtpParameters.RtcpParameters> rtcpOffset = default(Offset<FBS.RtpParameters.RtcpParameters>))
        {
            builder.StartTable(5);
            RtpParameters.AddRtcp(builder, rtcpOffset);
            RtpParameters.AddEncodings(builder, encodingsOffset);
            RtpParameters.AddHeaderExtensions(builder, header_extensionsOffset);
            RtpParameters.AddCodecs(builder, codecsOffset);
            RtpParameters.AddMid(builder, midOffset);
            return RtpParameters.EndRtpParameters(builder);
        }

        public static void StartRtpParameters(FlatBufferBuilder builder) { builder.StartTable(5); }
        public static void AddMid(FlatBufferBuilder builder, StringOffset midOffset) { builder.AddOffset(0, midOffset.Value, 0); }
        public static void AddCodecs(FlatBufferBuilder builder, VectorOffset codecsOffset) { builder.AddOffset(1, codecsOffset.Value, 0); }
        public static VectorOffset CreateCodecsVector(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpCodecParameters>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateCodecsVectorBlock(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpCodecParameters>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateCodecsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.RtpParameters.RtpCodecParameters>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateCodecsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.RtpParameters.RtpCodecParameters>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartCodecsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddHeaderExtensions(FlatBufferBuilder builder, VectorOffset headerExtensionsOffset) { builder.AddOffset(2, headerExtensionsOffset.Value, 0); }
        public static VectorOffset CreateHeaderExtensionsVector(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpHeaderExtensionParameters>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateHeaderExtensionsVectorBlock(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpHeaderExtensionParameters>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateHeaderExtensionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.RtpParameters.RtpHeaderExtensionParameters>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateHeaderExtensionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.RtpParameters.RtpHeaderExtensionParameters>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartHeaderExtensionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddEncodings(FlatBufferBuilder builder, VectorOffset encodingsOffset) { builder.AddOffset(3, encodingsOffset.Value, 0); }
        public static VectorOffset CreateEncodingsVector(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpEncodingParameters>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateEncodingsVectorBlock(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpEncodingParameters>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateEncodingsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.RtpParameters.RtpEncodingParameters>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateEncodingsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.RtpParameters.RtpEncodingParameters>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartEncodingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddRtcp(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtcpParameters> rtcpOffset) { builder.AddOffset(4, rtcpOffset.Value, 0); }
        public static Offset<FBS.RtpParameters.RtpParameters> EndRtpParameters(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 6);  // codecs
            builder.Required(o, 8);  // header_extensions
            builder.Required(o, 10);  // encodings
            builder.Required(o, 12);  // rtcp
            return new Offset<FBS.RtpParameters.RtpParameters>(o);
        }
        public RtpParametersT UnPack()
        {
            var _o = new RtpParametersT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(RtpParametersT _o)
        {
            _o.Mid = this.Mid;
            _o.Codecs = new List<FBS.RtpParameters.RtpCodecParametersT>();
            for(var _j = 0; _j < this.CodecsLength; ++_j)
            { _o.Codecs.Add(this.Codecs(_j).HasValue ? this.Codecs(_j).Value.UnPack() : null); }
            _o.HeaderExtensions = new List<FBS.RtpParameters.RtpHeaderExtensionParametersT>();
            for(var _j = 0; _j < this.HeaderExtensionsLength; ++_j)
            { _o.HeaderExtensions.Add(this.HeaderExtensions(_j).HasValue ? this.HeaderExtensions(_j).Value.UnPack() : null); }
            _o.Encodings = new List<FBS.RtpParameters.RtpEncodingParametersT>();
            for(var _j = 0; _j < this.EncodingsLength; ++_j)
            { _o.Encodings.Add(this.Encodings(_j).HasValue ? this.Encodings(_j).Value.UnPack() : null); }
            _o.Rtcp = this.Rtcp.HasValue ? this.Rtcp.Value.UnPack() : null;
        }
        public static Offset<FBS.RtpParameters.RtpParameters> Pack(FlatBufferBuilder builder, RtpParametersT _o)
        {
            if(_o == null)
                return default(Offset<FBS.RtpParameters.RtpParameters>);
            var _mid = _o.Mid == null ? default(StringOffset) : builder.CreateString(_o.Mid);
            var _codecs = default(VectorOffset);
            if(_o.Codecs != null)
            {
                var __codecs = new Offset<FBS.RtpParameters.RtpCodecParameters>[_o.Codecs.Count];
                for(var _j = 0; _j < __codecs.Length; ++_j)
                { __codecs[_j] = FBS.RtpParameters.RtpCodecParameters.Pack(builder, _o.Codecs[_j]); }
                _codecs = CreateCodecsVector(builder, __codecs);
            }
            var _header_extensions = default(VectorOffset);
            if(_o.HeaderExtensions != null)
            {
                var __header_extensions = new Offset<FBS.RtpParameters.RtpHeaderExtensionParameters>[_o.HeaderExtensions.Count];
                for(var _j = 0; _j < __header_extensions.Length; ++_j)
                { __header_extensions[_j] = FBS.RtpParameters.RtpHeaderExtensionParameters.Pack(builder, _o.HeaderExtensions[_j]); }
                _header_extensions = CreateHeaderExtensionsVector(builder, __header_extensions);
            }
            var _encodings = default(VectorOffset);
            if(_o.Encodings != null)
            {
                var __encodings = new Offset<FBS.RtpParameters.RtpEncodingParameters>[_o.Encodings.Count];
                for(var _j = 0; _j < __encodings.Length; ++_j)
                { __encodings[_j] = FBS.RtpParameters.RtpEncodingParameters.Pack(builder, _o.Encodings[_j]); }
                _encodings = CreateEncodingsVector(builder, __encodings);
            }
            var _rtcp = _o.Rtcp == null ? default(Offset<FBS.RtpParameters.RtcpParameters>) : FBS.RtpParameters.RtcpParameters.Pack(builder, _o.Rtcp);
            return CreateRtpParameters(
              builder,
              _mid,
              _codecs,
              _header_extensions,
              _encodings,
              _rtcp);
        }
    }
}
