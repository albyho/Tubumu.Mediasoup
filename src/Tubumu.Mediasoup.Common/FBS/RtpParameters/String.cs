// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.RtpParameters
{
    public struct String : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static String GetRootAsString(ByteBuffer _bb) { return GetRootAsString(_bb, new String()); }
        public static String GetRootAsString(ByteBuffer _bb, String obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public String __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Value { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetValueArray() { return __p.__vector_as_array<byte>(4); }

        public static Offset<FBS.RtpParameters.String> CreateString(FlatBufferBuilder builder,
            StringOffset valueOffset = default(StringOffset))
        {
            builder.StartTable(1);
            String.AddValue(builder, valueOffset);
            return String.EndString(builder);
        }

        public static void StartString(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(0, valueOffset.Value, 0); }
        public static Offset<FBS.RtpParameters.String> EndString(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // value
            return new Offset<FBS.RtpParameters.String>(o);
        }
        public StringT UnPack()
        {
            var _o = new StringT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(StringT _o)
        {
            _o.Value = this.Value;
        }
        public static Offset<FBS.RtpParameters.String> Pack(FlatBufferBuilder builder, StringT _o)
        {
            if(_o == null)
                return default(Offset<FBS.RtpParameters.String>);
            var _value = _o.Value == null ? default(StringOffset) : builder.CreateString(_o.Value);
            return CreateString(
              builder,
              _value);
        }
    }

    public class StringT
    {
        [JsonPropertyName("value")]
        public string Value { get; set; }

        public StringT()
        {
            this.Value = null;
        }
    }
}
