// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.DataProducer
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct SendNotification : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static SendNotification GetRootAsSendNotification(ByteBuffer _bb) { return GetRootAsSendNotification(_bb, new SendNotification()); }
        public static SendNotification GetRootAsSendNotification(ByteBuffer _bb, SendNotification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public SendNotification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public uint Ppid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public byte Data(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
        public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
        public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
        public byte[] GetDataArray() { return __p.__vector_as_array<byte>(6); }
        public ushort Subchannels(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
        public int SubchannelsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ushort> GetSubchannelsBytes() { return __p.__vector_as_span<ushort>(8, 2); }
#else
        public ArraySegment<byte>? GetSubchannelsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
        public ushort[] GetSubchannelsArray() { return __p.__vector_as_array<ushort>(8); }
        public ushort? RequiredSubchannel { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort?)null; } }

        public static Offset<FBS.DataProducer.SendNotification> CreateSendNotification(FlatBufferBuilder builder,
            uint ppid = 0,
            VectorOffset dataOffset = default(VectorOffset),
            VectorOffset subchannelsOffset = default(VectorOffset),
            ushort? required_subchannel = null)
        {
            builder.StartTable(4);
            SendNotification.AddSubchannels(builder, subchannelsOffset);
            SendNotification.AddData(builder, dataOffset);
            SendNotification.AddPpid(builder, ppid);
            SendNotification.AddRequiredSubchannel(builder, required_subchannel);
            return SendNotification.EndSendNotification(builder);
        }

        public static void StartSendNotification(FlatBufferBuilder builder) { builder.StartTable(4); }
        public static void AddPpid(FlatBufferBuilder builder, uint ppid) { builder.AddUint(0, ppid, 0); }
        public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
        public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for(int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static void AddSubchannels(FlatBufferBuilder builder, VectorOffset subchannelsOffset) { builder.AddOffset(2, subchannelsOffset.Value, 0); }
        public static VectorOffset CreateSubchannelsVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for(int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateSubchannelsVectorBlock(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateSubchannelsVectorBlock(FlatBufferBuilder builder, ArraySegment<ushort> data) { builder.StartVector(2, data.Count, 2); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateSubchannelsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<ushort>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartSubchannelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
        public static void AddRequiredSubchannel(FlatBufferBuilder builder, ushort? requiredSubchannel) { builder.AddUshort(3, requiredSubchannel); }
        public static Offset<FBS.DataProducer.SendNotification> EndSendNotification(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 6);  // data
            return new Offset<FBS.DataProducer.SendNotification>(o);
        }
        public SendNotificationT UnPack()
        {
            var _o = new SendNotificationT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(SendNotificationT _o)
        {
            _o.Ppid = this.Ppid;
            _o.Data = new byte[this.DataLength];
            for(var _j = 0; _j < this.DataLength; ++_j)
            { _o.Data[_j] = this.Data(_j); }
            _o.Subchannels = new ushort[this.SubchannelsLength];
            for(var _j = 0; _j < this.SubchannelsLength; ++_j)
            { _o.Subchannels[_j] = this.Subchannels(_j); }
            _o.RequiredSubchannel = this.RequiredSubchannel;
        }
        public static Offset<FBS.DataProducer.SendNotification> Pack(FlatBufferBuilder builder, SendNotificationT _o)
        {
            if(_o == null)
                return default(Offset<FBS.DataProducer.SendNotification>);
            var _data = default(VectorOffset);
            if(_o.Data != null)
            {
                var __data = _o.Data;
                _data = CreateDataVector(builder, __data);
            }
            var _subchannels = default(VectorOffset);
            if(_o.Subchannels != null)
            {
                var __subchannels = _o.Subchannels;
                _subchannels = CreateSubchannelsVector(builder, __subchannels);
            }
            return CreateSendNotification(
              builder,
              _o.Ppid,
              _data,
              _subchannels,
              _o.RequiredSubchannel);
        }
    }

    public class SendNotificationT
    {
        public uint Ppid { get; set; }

        public byte[] Data { get; set; }

        public ushort[] Subchannels { get; set; }

        public ushort? RequiredSubchannel { get; set; }

        public SendNotificationT()
        {
            this.Ppid = 0;
            this.Data = null;
            this.Subchannels = null;
            this.RequiredSubchannel = null;
        }
    }


    static public class SendNotificationVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyField(tablePos, 4 /*Ppid*/, 4 /*uint*/, 4, false)
              && verifier.VerifyVectorOfData(tablePos, 6 /*Data*/, 1 /*byte*/, true)
              && verifier.VerifyVectorOfData(tablePos, 8 /*Subchannels*/, 2 /*ushort*/, false)
              && verifier.VerifyField(tablePos, 10 /*RequiredSubchannel*/, 2 /*ushort*/, 2, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
