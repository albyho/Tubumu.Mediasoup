// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FBS.Router
{

  using System;
  using System.Collections.Generic;
  using Google.FlatBuffers;
  using System.Text.Json.Serialization;

  public struct CreateActiveSpeakerObserverRequest : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
    public static CreateActiveSpeakerObserverRequest GetRootAsCreateActiveSpeakerObserverRequest( ByteBuffer _bb ) { return GetRootAsCreateActiveSpeakerObserverRequest( _bb, new CreateActiveSpeakerObserverRequest() ); }
    public static CreateActiveSpeakerObserverRequest GetRootAsCreateActiveSpeakerObserverRequest( ByteBuffer _bb, CreateActiveSpeakerObserverRequest obj ) { return (obj.__assign( _bb.GetInt( _bb.Position ) + _bb.Position, _bb )); }
    public void __init( int _i, ByteBuffer _bb ) { __p = new Table( _i, _bb ); }
    public CreateActiveSpeakerObserverRequest __assign( int _i, ByteBuffer _bb ) { __init( _i, _bb ); return this; }

    public string RtpObserverId { get { int o = __p.__offset( 4 ); return o != 0 ? __p.__string( o + __p.bb_pos ) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRtpObserverIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
    public ArraySegment<byte>? GetRtpObserverIdBytes() { return __p.__vector_as_arraysegment( 4 ); }
#endif
    public byte[] GetRtpObserverIdArray() { return __p.__vector_as_array<byte>( 4 ); }
    public FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions? Options { get { int o = __p.__offset( 6 ); return o != 0 ? ( FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions? ) (new FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions()).__assign( __p.__indirect( o + __p.bb_pos ), __p.bb ) : null; } }

    public static Offset<FBS.Router.CreateActiveSpeakerObserverRequest> CreateCreateActiveSpeakerObserverRequest( FlatBufferBuilder builder,
        StringOffset rtp_observer_idOffset = default( StringOffset ),
        Offset<FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions> optionsOffset = default( Offset<FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions> ) )
    {
      builder.StartTable( 2 );
      CreateActiveSpeakerObserverRequest.AddOptions( builder, optionsOffset );
      CreateActiveSpeakerObserverRequest.AddRtpObserverId( builder, rtp_observer_idOffset );
      return CreateActiveSpeakerObserverRequest.EndCreateActiveSpeakerObserverRequest( builder );
    }

    public static void StartCreateActiveSpeakerObserverRequest( FlatBufferBuilder builder ) { builder.StartTable( 2 ); }
    public static void AddRtpObserverId( FlatBufferBuilder builder, StringOffset rtpObserverIdOffset ) { builder.AddOffset( 0, rtpObserverIdOffset.Value, 0 ); }
    public static void AddOptions( FlatBufferBuilder builder, Offset<FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions> optionsOffset ) { builder.AddOffset( 1, optionsOffset.Value, 0 ); }
    public static Offset<FBS.Router.CreateActiveSpeakerObserverRequest> EndCreateActiveSpeakerObserverRequest( FlatBufferBuilder builder )
    {
      int o = builder.EndTable();
      builder.Required( o, 4 );  // rtp_observer_id
      builder.Required( o, 6 );  // options
      return new Offset<FBS.Router.CreateActiveSpeakerObserverRequest>( o );
    }
    public CreateActiveSpeakerObserverRequestT UnPack()
    {
      var _o = new CreateActiveSpeakerObserverRequestT();
      this.UnPackTo( _o );
      return _o;
    }
    public void UnPackTo( CreateActiveSpeakerObserverRequestT _o )
    {
      _o.RtpObserverId = this.RtpObserverId;
      _o.Options = this.Options.HasValue ? this.Options.Value.UnPack() : null;
    }
    public static Offset<FBS.Router.CreateActiveSpeakerObserverRequest> Pack( FlatBufferBuilder builder, CreateActiveSpeakerObserverRequestT _o )
    {
      if ( _o == null )
        return default( Offset<FBS.Router.CreateActiveSpeakerObserverRequest> );
      var _rtp_observer_id = _o.RtpObserverId == null ? default( StringOffset ) : builder.CreateString( _o.RtpObserverId );
      var _options = _o.Options == null ? default( Offset<FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions> ) : FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptions.Pack( builder, _o.Options );
      return CreateCreateActiveSpeakerObserverRequest(
        builder,
        _rtp_observer_id,
        _options );
    }
  }

  public class CreateActiveSpeakerObserverRequestT
  {
    [JsonPropertyName( "rtp_observer_id" )]
    public string RtpObserverId { get; set; }
    [JsonPropertyName( "options" )]
    public FBS.ActiveSpeakerObserver.ActiveSpeakerObserverOptionsT Options { get; set; }

    public CreateActiveSpeakerObserverRequestT()
    {
      this.RtpObserverId = null;
      this.Options = null;
    }
  }


}
