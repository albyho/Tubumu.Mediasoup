// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FBS.Router
{

  using System;
  using System.Collections.Generic;
  using Google.FlatBuffers;
  using System.Text.Json.Serialization;

  public struct CloseTransportRequest : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
    public static CloseTransportRequest GetRootAsCloseTransportRequest( ByteBuffer _bb ) { return GetRootAsCloseTransportRequest( _bb, new CloseTransportRequest() ); }
    public static CloseTransportRequest GetRootAsCloseTransportRequest( ByteBuffer _bb, CloseTransportRequest obj ) { return (obj.__assign( _bb.GetInt( _bb.Position ) + _bb.Position, _bb )); }
    public void __init( int _i, ByteBuffer _bb ) { __p = new Table( _i, _bb ); }
    public CloseTransportRequest __assign( int _i, ByteBuffer _bb ) { __init( _i, _bb ); return this; }

    public string TransportId { get { int o = __p.__offset( 4 ); return o != 0 ? __p.__string( o + __p.bb_pos ) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransportIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
    public ArraySegment<byte>? GetTransportIdBytes() { return __p.__vector_as_arraysegment( 4 ); }
#endif
    public byte[] GetTransportIdArray() { return __p.__vector_as_array<byte>( 4 ); }

    public static Offset<FBS.Router.CloseTransportRequest> CreateCloseTransportRequest( FlatBufferBuilder builder,
        StringOffset transport_idOffset = default( StringOffset ) )
    {
      builder.StartTable( 1 );
      CloseTransportRequest.AddTransportId( builder, transport_idOffset );
      return CloseTransportRequest.EndCloseTransportRequest( builder );
    }

    public static void StartCloseTransportRequest( FlatBufferBuilder builder ) { builder.StartTable( 1 ); }
    public static void AddTransportId( FlatBufferBuilder builder, StringOffset transportIdOffset ) { builder.AddOffset( 0, transportIdOffset.Value, 0 ); }
    public static Offset<FBS.Router.CloseTransportRequest> EndCloseTransportRequest( FlatBufferBuilder builder )
    {
      int o = builder.EndTable();
      builder.Required( o, 4 );  // transport_id
      return new Offset<FBS.Router.CloseTransportRequest>( o );
    }
    public CloseTransportRequestT UnPack()
    {
      var _o = new CloseTransportRequestT();
      this.UnPackTo( _o );
      return _o;
    }
    public void UnPackTo( CloseTransportRequestT _o )
    {
      _o.TransportId = this.TransportId;
    }
    public static Offset<FBS.Router.CloseTransportRequest> Pack( FlatBufferBuilder builder, CloseTransportRequestT _o )
    {
      if ( _o == null )
        return default( Offset<FBS.Router.CloseTransportRequest> );
      var _transport_id = _o.TransportId == null ? default( StringOffset ) : builder.CreateString( _o.TransportId );
      return CreateCloseTransportRequest(
        builder,
        _transport_id );
    }
  }

  public class CloseTransportRequestT
  {
    [JsonPropertyName( "transport_id" )]
    public string TransportId { get; set; }

    public CloseTransportRequestT()
    {
      this.TransportId = null;
    }
  }


}
