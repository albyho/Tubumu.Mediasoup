// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.Router
{
    public struct CloseRtpObserverRequest : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static CloseRtpObserverRequest GetRootAsCloseRtpObserverRequest(ByteBuffer _bb) { return GetRootAsCloseRtpObserverRequest(_bb, new CloseRtpObserverRequest()); }
        public static CloseRtpObserverRequest GetRootAsCloseRtpObserverRequest(ByteBuffer _bb, CloseRtpObserverRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public CloseRtpObserverRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string RtpObserverId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRtpObserverIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetRtpObserverIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetRtpObserverIdArray() { return __p.__vector_as_array<byte>(4); }

        public static Offset<FBS.Router.CloseRtpObserverRequest> CreateCloseRtpObserverRequest(FlatBufferBuilder builder,
            StringOffset rtp_observer_idOffset = default(StringOffset))
        {
            builder.StartTable(1);
            CloseRtpObserverRequest.AddRtpObserverId(builder, rtp_observer_idOffset);
            return CloseRtpObserverRequest.EndCloseRtpObserverRequest(builder);
        }

        public static void StartCloseRtpObserverRequest(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddRtpObserverId(FlatBufferBuilder builder, StringOffset rtpObserverIdOffset) { builder.AddOffset(0, rtpObserverIdOffset.Value, 0); }
        public static Offset<FBS.Router.CloseRtpObserverRequest> EndCloseRtpObserverRequest(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // rtp_observer_id
            return new Offset<FBS.Router.CloseRtpObserverRequest>(o);
        }
        public CloseRtpObserverRequestT UnPack()
        {
            var _o = new CloseRtpObserverRequestT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(CloseRtpObserverRequestT _o)
        {
            _o.RtpObserverId = this.RtpObserverId;
        }
        public static Offset<FBS.Router.CloseRtpObserverRequest> Pack(FlatBufferBuilder builder, CloseRtpObserverRequestT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Router.CloseRtpObserverRequest>);
            var _rtp_observer_id = _o.RtpObserverId == null ? default(StringOffset) : builder.CreateString(_o.RtpObserverId);
            return CreateCloseRtpObserverRequest(
              builder,
              _rtp_observer_id);
        }
    }

    public class CloseRtpObserverRequestT
    {
        [JsonPropertyName("rtp_observer_id")]
        public string RtpObserverId { get; set; }

        public CloseRtpObserverRequestT()
        {
            this.RtpObserverId = null;
        }
    }
}
