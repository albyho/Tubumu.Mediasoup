// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.DataConsumer
{
    public struct SetBufferedAmountLowThresholdRequest : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static SetBufferedAmountLowThresholdRequest GetRootAsSetBufferedAmountLowThresholdRequest(ByteBuffer _bb) { return GetRootAsSetBufferedAmountLowThresholdRequest(_bb, new SetBufferedAmountLowThresholdRequest()); }
        public static SetBufferedAmountLowThresholdRequest GetRootAsSetBufferedAmountLowThresholdRequest(ByteBuffer _bb, SetBufferedAmountLowThresholdRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public SetBufferedAmountLowThresholdRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public uint Threshold { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

        public static Offset<FBS.DataConsumer.SetBufferedAmountLowThresholdRequest> CreateSetBufferedAmountLowThresholdRequest(FlatBufferBuilder builder,
            uint threshold = 0)
        {
            builder.StartTable(1);
            SetBufferedAmountLowThresholdRequest.AddThreshold(builder, threshold);
            return SetBufferedAmountLowThresholdRequest.EndSetBufferedAmountLowThresholdRequest(builder);
        }

        public static void StartSetBufferedAmountLowThresholdRequest(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddThreshold(FlatBufferBuilder builder, uint threshold) { builder.AddUint(0, threshold, 0); }
        public static Offset<FBS.DataConsumer.SetBufferedAmountLowThresholdRequest> EndSetBufferedAmountLowThresholdRequest(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.DataConsumer.SetBufferedAmountLowThresholdRequest>(o);
        }
        public SetBufferedAmountLowThresholdRequestT UnPack()
        {
            var _o = new SetBufferedAmountLowThresholdRequestT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(SetBufferedAmountLowThresholdRequestT _o)
        {
            _o.Threshold = this.Threshold;
        }
        public static Offset<FBS.DataConsumer.SetBufferedAmountLowThresholdRequest> Pack(FlatBufferBuilder builder, SetBufferedAmountLowThresholdRequestT _o)
        {
            if(_o == null)
                return default(Offset<FBS.DataConsumer.SetBufferedAmountLowThresholdRequest>);
            return CreateSetBufferedAmountLowThresholdRequest(
              builder,
              _o.Threshold);
        }
    }
}
