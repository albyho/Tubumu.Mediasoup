// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.Transport
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct ConsumeResponse : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static ConsumeResponse GetRootAsConsumeResponse(ByteBuffer _bb) { return GetRootAsConsumeResponse(_bb, new ConsumeResponse()); }
        public static ConsumeResponse GetRootAsConsumeResponse(ByteBuffer _bb, ConsumeResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public ConsumeResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public bool Paused { get { int o = __p.__offset(4); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public bool ProducerPaused { get { int o = __p.__offset(6); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public FBS.Consumer.ConsumerScore? Score { get { int o = __p.__offset(8); return o != 0 ? (FBS.Consumer.ConsumerScore?)(new FBS.Consumer.ConsumerScore()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.Consumer.ConsumerLayers? PreferredLayers { get { int o = __p.__offset(10); return o != 0 ? (FBS.Consumer.ConsumerLayers?)(new FBS.Consumer.ConsumerLayers()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<FBS.Transport.ConsumeResponse> CreateConsumeResponse(FlatBufferBuilder builder,
            bool paused = false,
            bool producer_paused = false,
            Offset<FBS.Consumer.ConsumerScore> scoreOffset = default(Offset<FBS.Consumer.ConsumerScore>),
            Offset<FBS.Consumer.ConsumerLayers> preferred_layersOffset = default(Offset<FBS.Consumer.ConsumerLayers>))
        {
            builder.StartTable(4);
            ConsumeResponse.AddPreferredLayers(builder, preferred_layersOffset);
            ConsumeResponse.AddScore(builder, scoreOffset);
            ConsumeResponse.AddProducerPaused(builder, producer_paused);
            ConsumeResponse.AddPaused(builder, paused);
            return ConsumeResponse.EndConsumeResponse(builder);
        }

        public static void StartConsumeResponse(FlatBufferBuilder builder) { builder.StartTable(4); }
        public static void AddPaused(FlatBufferBuilder builder, bool paused) { builder.AddBool(0, paused, false); }
        public static void AddProducerPaused(FlatBufferBuilder builder, bool producerPaused) { builder.AddBool(1, producerPaused, false); }
        public static void AddScore(FlatBufferBuilder builder, Offset<FBS.Consumer.ConsumerScore> scoreOffset) { builder.AddOffset(2, scoreOffset.Value, 0); }
        public static void AddPreferredLayers(FlatBufferBuilder builder, Offset<FBS.Consumer.ConsumerLayers> preferredLayersOffset) { builder.AddOffset(3, preferredLayersOffset.Value, 0); }
        public static Offset<FBS.Transport.ConsumeResponse> EndConsumeResponse(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 8);  // score
            return new Offset<FBS.Transport.ConsumeResponse>(o);
        }
        public ConsumeResponseT UnPack()
        {
            var _o = new ConsumeResponseT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(ConsumeResponseT _o)
        {
            _o.Paused = this.Paused;
            _o.ProducerPaused = this.ProducerPaused;
            _o.Score = this.Score.HasValue ? this.Score.Value.UnPack() : null;
            _o.PreferredLayers = this.PreferredLayers.HasValue ? this.PreferredLayers.Value.UnPack() : null;
        }
        public static Offset<FBS.Transport.ConsumeResponse> Pack(FlatBufferBuilder builder, ConsumeResponseT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Transport.ConsumeResponse>);
            var _score = _o.Score == null ? default(Offset<FBS.Consumer.ConsumerScore>) : FBS.Consumer.ConsumerScore.Pack(builder, _o.Score);
            var _preferred_layers = _o.PreferredLayers == null ? default(Offset<FBS.Consumer.ConsumerLayers>) : FBS.Consumer.ConsumerLayers.Pack(builder, _o.PreferredLayers);
            return CreateConsumeResponse(
              builder,
              _o.Paused,
              _o.ProducerPaused,
              _score,
              _preferred_layers);
        }
    }

    public class ConsumeResponseT
    {
        public bool Paused { get; set; }

        public bool ProducerPaused { get; set; }

        public FBS.Consumer.ConsumerScoreT Score { get; set; }

        public FBS.Consumer.ConsumerLayersT PreferredLayers { get; set; }

        public ConsumeResponseT()
        {
            this.Paused = false;
            this.ProducerPaused = false;
            this.Score = null;
            this.PreferredLayers = null;
        }
    }


    static public class ConsumeResponseVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyField(tablePos, 4 /*Paused*/, 1 /*bool*/, 1, false)
              && verifier.VerifyField(tablePos, 6 /*ProducerPaused*/, 1 /*bool*/, 1, false)
              && verifier.VerifyTable(tablePos, 8 /*Score*/, FBS.Consumer.ConsumerScoreVerify.Verify, true)
              && verifier.VerifyTable(tablePos, 10 /*PreferredLayers*/, FBS.Consumer.ConsumerLayersVerify.Verify, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
