// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.Transport
{
    public struct RtpListener : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static RtpListener GetRootAsRtpListener(ByteBuffer _bb) { return GetRootAsRtpListener(_bb, new RtpListener()); }
        public static RtpListener GetRootAsRtpListener(ByteBuffer _bb, RtpListener obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public RtpListener __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Common.Uint32String? SsrcTable(int j) { int o = __p.__offset(4); return o != 0 ? (FBS.Common.Uint32String?)(new FBS.Common.Uint32String()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int SsrcTableLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
        public FBS.Common.StringString? MidTable(int j) { int o = __p.__offset(6); return o != 0 ? (FBS.Common.StringString?)(new FBS.Common.StringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int MidTableLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
        public FBS.Common.StringString? RidTable(int j) { int o = __p.__offset(8); return o != 0 ? (FBS.Common.StringString?)(new FBS.Common.StringString()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int RidTableLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

        public static Offset<FBS.Transport.RtpListener> CreateRtpListener(FlatBufferBuilder builder,
            VectorOffset ssrc_tableOffset = default(VectorOffset),
            VectorOffset mid_tableOffset = default(VectorOffset),
            VectorOffset rid_tableOffset = default(VectorOffset))
        {
            builder.StartTable(3);
            RtpListener.AddRidTable(builder, rid_tableOffset);
            RtpListener.AddMidTable(builder, mid_tableOffset);
            RtpListener.AddSsrcTable(builder, ssrc_tableOffset);
            return RtpListener.EndRtpListener(builder);
        }

        public static void StartRtpListener(FlatBufferBuilder builder) { builder.StartTable(3); }
        public static void AddSsrcTable(FlatBufferBuilder builder, VectorOffset ssrcTableOffset) { builder.AddOffset(0, ssrcTableOffset.Value, 0); }
        public static VectorOffset CreateSsrcTableVector(FlatBufferBuilder builder, Offset<FBS.Common.Uint32String>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateSsrcTableVectorBlock(FlatBufferBuilder builder, Offset<FBS.Common.Uint32String>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateSsrcTableVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.Common.Uint32String>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateSsrcTableVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.Common.Uint32String>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartSsrcTableVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddMidTable(FlatBufferBuilder builder, VectorOffset midTableOffset) { builder.AddOffset(1, midTableOffset.Value, 0); }
        public static VectorOffset CreateMidTableVector(FlatBufferBuilder builder, Offset<FBS.Common.StringString>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateMidTableVectorBlock(FlatBufferBuilder builder, Offset<FBS.Common.StringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateMidTableVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.Common.StringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateMidTableVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.Common.StringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartMidTableVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddRidTable(FlatBufferBuilder builder, VectorOffset ridTableOffset) { builder.AddOffset(2, ridTableOffset.Value, 0); }
        public static VectorOffset CreateRidTableVector(FlatBufferBuilder builder, Offset<FBS.Common.StringString>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateRidTableVectorBlock(FlatBufferBuilder builder, Offset<FBS.Common.StringString>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateRidTableVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.Common.StringString>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateRidTableVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.Common.StringString>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartRidTableVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<FBS.Transport.RtpListener> EndRtpListener(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // ssrc_table
            builder.Required(o, 6);  // mid_table
            builder.Required(o, 8);  // rid_table
            return new Offset<FBS.Transport.RtpListener>(o);
        }
        public RtpListenerT UnPack()
        {
            var _o = new RtpListenerT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(RtpListenerT _o)
        {
            _o.SsrcTable = new List<FBS.Common.Uint32StringT>();
            for(var _j = 0; _j < this.SsrcTableLength; ++_j)
            { _o.SsrcTable.Add(this.SsrcTable(_j).HasValue ? this.SsrcTable(_j).Value.UnPack() : null); }
            _o.MidTable = new List<FBS.Common.StringStringT>();
            for(var _j = 0; _j < this.MidTableLength; ++_j)
            { _o.MidTable.Add(this.MidTable(_j).HasValue ? this.MidTable(_j).Value.UnPack() : null); }
            _o.RidTable = new List<FBS.Common.StringStringT>();
            for(var _j = 0; _j < this.RidTableLength; ++_j)
            { _o.RidTable.Add(this.RidTable(_j).HasValue ? this.RidTable(_j).Value.UnPack() : null); }
        }
        public static Offset<FBS.Transport.RtpListener> Pack(FlatBufferBuilder builder, RtpListenerT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Transport.RtpListener>);
            var _ssrc_table = default(VectorOffset);
            if(_o.SsrcTable != null)
            {
                var __ssrc_table = new Offset<FBS.Common.Uint32String>[_o.SsrcTable.Count];
                for(var _j = 0; _j < __ssrc_table.Length; ++_j)
                { __ssrc_table[_j] = FBS.Common.Uint32String.Pack(builder, _o.SsrcTable[_j]); }
                _ssrc_table = CreateSsrcTableVector(builder, __ssrc_table);
            }
            var _mid_table = default(VectorOffset);
            if(_o.MidTable != null)
            {
                var __mid_table = new Offset<FBS.Common.StringString>[_o.MidTable.Count];
                for(var _j = 0; _j < __mid_table.Length; ++_j)
                { __mid_table[_j] = FBS.Common.StringString.Pack(builder, _o.MidTable[_j]); }
                _mid_table = CreateMidTableVector(builder, __mid_table);
            }
            var _rid_table = default(VectorOffset);
            if(_o.RidTable != null)
            {
                var __rid_table = new Offset<FBS.Common.StringString>[_o.RidTable.Count];
                for(var _j = 0; _j < __rid_table.Length; ++_j)
                { __rid_table[_j] = FBS.Common.StringString.Pack(builder, _o.RidTable[_j]); }
                _rid_table = CreateRidTableVector(builder, __rid_table);
            }
            return CreateRtpListener(
              builder,
              _ssrc_table,
              _mid_table,
              _rid_table);
        }
    }

    public class RtpListenerT
    {
        [JsonPropertyName("ssrc_table")]
        public List<FBS.Common.Uint32StringT> SsrcTable { get; set; }
        [JsonPropertyName("mid_table")]
        public List<FBS.Common.StringStringT> MidTable { get; set; }
        [JsonPropertyName("rid_table")]
        public List<FBS.Common.StringStringT> RidTable { get; set; }

        public RtpListenerT()
        {
            this.SsrcTable = null;
            this.MidTable = null;
            this.RidTable = null;
        }
    }
}
