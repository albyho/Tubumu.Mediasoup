// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Text.Json.Serialization;
using Google.FlatBuffers;

namespace FBS.Transport
{
    public struct ListenInfo : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static ListenInfo GetRootAsListenInfo(ByteBuffer _bb) { return GetRootAsListenInfo(_bb, new ListenInfo()); }
        public static ListenInfo GetRootAsListenInfo(ByteBuffer _bb, ListenInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public ListenInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Transport.Protocol Protocol { get { int o = __p.__offset(4); return o != 0 ? (FBS.Transport.Protocol)__p.bb.Get(o + __p.bb_pos) : FBS.Transport.Protocol.UDP; } }
        public string Ip { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIpBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
        public ArraySegment<byte>? GetIpBytes() { return __p.__vector_as_arraysegment(6); }
#endif
        public byte[] GetIpArray() { return __p.__vector_as_array<byte>(6); }
        public string AnnouncedAddress { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnnouncedAddressBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
        public ArraySegment<byte>? GetAnnouncedAddressBytes() { return __p.__vector_as_arraysegment(8); }
#endif
        public byte[] GetAnnouncedAddressArray() { return __p.__vector_as_array<byte>(8); }
        public ushort Port { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
        public FBS.Transport.SocketFlags? Flags { get { int o = __p.__offset(12); return o != 0 ? (FBS.Transport.SocketFlags?)(new FBS.Transport.SocketFlags()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public uint SendBufferSize { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public uint RecvBufferSize { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

        public static Offset<FBS.Transport.ListenInfo> CreateListenInfo(FlatBufferBuilder builder,
            FBS.Transport.Protocol protocol = FBS.Transport.Protocol.UDP,
            StringOffset ipOffset = default(StringOffset),
            StringOffset announced_ipOffset = default(StringOffset),
            ushort port = 0,
            Offset<FBS.Transport.SocketFlags> flagsOffset = default(Offset<FBS.Transport.SocketFlags>),
            uint send_buffer_size = 0,
            uint recv_buffer_size = 0)
        {
            builder.StartTable(7);
            ListenInfo.AddRecvBufferSize(builder, recv_buffer_size);
            ListenInfo.AddSendBufferSize(builder, send_buffer_size);
            ListenInfo.AddFlags(builder, flagsOffset);
            ListenInfo.AddAnnouncedAddress(builder, announced_ipOffset);
            ListenInfo.AddIp(builder, ipOffset);
            ListenInfo.AddPort(builder, port);
            ListenInfo.AddProtocol(builder, protocol);
            return ListenInfo.EndListenInfo(builder);
        }

        public static void StartListenInfo(FlatBufferBuilder builder) { builder.StartTable(7); }
        public static void AddProtocol(FlatBufferBuilder builder, FBS.Transport.Protocol protocol) { builder.AddByte(0, (byte)protocol, 1); }
        public static void AddIp(FlatBufferBuilder builder, StringOffset ipOffset) { builder.AddOffset(1, ipOffset.Value, 0); }
        public static void AddAnnouncedAddress(FlatBufferBuilder builder, StringOffset announcedAddressOffset) { builder.AddOffset(2, announcedAddressOffset.Value, 0); }
        public static void AddPort(FlatBufferBuilder builder, ushort port) { builder.AddUshort(3, port, 0); }
        public static void AddFlags(FlatBufferBuilder builder, Offset<FBS.Transport.SocketFlags> flagsOffset) { builder.AddOffset(4, flagsOffset.Value, 0); }
        public static void AddSendBufferSize(FlatBufferBuilder builder, uint sendBufferSize) { builder.AddUint(5, sendBufferSize, 0); }
        public static void AddRecvBufferSize(FlatBufferBuilder builder, uint recvBufferSize) { builder.AddUint(6, recvBufferSize, 0); }
        public static Offset<FBS.Transport.ListenInfo> EndListenInfo(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 6);  // ip
            builder.Required(o, 12);  // flags
            return new Offset<FBS.Transport.ListenInfo>(o);
        }
        public ListenInfoT UnPack()
        {
            var _o = new ListenInfoT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(ListenInfoT _o)
        {
            _o.Protocol = this.Protocol;
            _o.Ip = this.Ip;
            _o.AnnouncedAddress = this.AnnouncedAddress;
            _o.Port = this.Port;
            _o.Flags = this.Flags.HasValue ? this.Flags.Value.UnPack() : null;
            _o.SendBufferSize = this.SendBufferSize;
            _o.RecvBufferSize = this.RecvBufferSize;
        }
        public static Offset<FBS.Transport.ListenInfo> Pack(FlatBufferBuilder builder, ListenInfoT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Transport.ListenInfo>);
            var _ip = _o.Ip == null ? default(StringOffset) : builder.CreateString(_o.Ip);
            var _announced_ip = _o.AnnouncedAddress == null ? default(StringOffset) : builder.CreateString(_o.AnnouncedAddress);
            var _flags = _o.Flags == null ? default(Offset<FBS.Transport.SocketFlags>) : FBS.Transport.SocketFlags.Pack(builder, _o.Flags);
            return CreateListenInfo(
              builder,
              _o.Protocol,
              _ip,
              _announced_ip,
              _o.Port,
              _flags,
              _o.SendBufferSize,
              _o.RecvBufferSize);
        }
    }
}
