// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Text.Json.Serialization;
using Google.FlatBuffers;

namespace FBS.Transport
{
    public struct Stats : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static Stats GetRootAsStats(ByteBuffer _bb) { return GetRootAsStats(_bb, new Stats()); }
        public static Stats GetRootAsStats(ByteBuffer _bb, Stats obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Stats __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string TransportId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransportIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetTransportIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetTransportIdArray() { return __p.__vector_as_array<byte>(4); }
        public ulong Timestamp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public FBS.SctpAssociation.SctpState? SctpState { get { int o = __p.__offset(8); return o != 0 ? (FBS.SctpAssociation.SctpState)__p.bb.Get(o + __p.bb_pos) : (FBS.SctpAssociation.SctpState?)null; } }
        public ulong BytesReceived { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public uint RecvBitrate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public ulong BytesSent { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public uint SendBitrate { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public ulong RtpBytesReceived { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public uint RtpRecvBitrate { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public ulong RtpBytesSent { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public uint RtpSendBitrate { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public ulong RtxBytesReceived { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public uint RtxRecvBitrate { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public ulong RtxBytesSent { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public uint RtxSendBitrate { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public ulong ProbationBytesSent { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public uint ProbationSendBitrate { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public uint? AvailableOutgoingBitrate { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint?)null; } }
        public uint? AvailableIncomingBitrate { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint?)null; } }
        public uint? MaxIncomingBitrate { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint?)null; } }
        public uint? MaxOutgoingBitrate { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint?)null; } }
        public uint? MinOutgoingBitrate { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint?)null; } }
        public double? RtpPacketLossReceived { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double?)null; } }
        public double? RtpPacketLossSent { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double?)null; } }

        public static Offset<FBS.Transport.Stats> CreateStats(FlatBufferBuilder builder,
            StringOffset transport_idOffset = default(StringOffset),
            ulong timestamp = 0,
            FBS.SctpAssociation.SctpState? sctp_state = null,
            ulong bytes_received = 0,
            uint recv_bitrate = 0,
            ulong bytes_sent = 0,
            uint send_bitrate = 0,
            ulong rtp_bytes_received = 0,
            uint rtp_recv_bitrate = 0,
            ulong rtp_bytes_sent = 0,
            uint rtp_send_bitrate = 0,
            ulong rtx_bytes_received = 0,
            uint rtx_recv_bitrate = 0,
            ulong rtx_bytes_sent = 0,
            uint rtx_send_bitrate = 0,
            ulong probation_bytes_sent = 0,
            uint probation_send_bitrate = 0,
            uint? available_outgoing_bitrate = null,
            uint? available_incoming_bitrate = null,
            uint? max_incoming_bitrate = null,
            uint? max_outgoing_bitrate = null,
            uint? min_outgoing_bitrate = null,
            double? rtp_packet_loss_received = null,
            double? rtp_packet_loss_sent = null)
        {
            builder.StartTable(24);
            Stats.AddRtpPacketLossSent(builder, rtp_packet_loss_sent);
            Stats.AddRtpPacketLossReceived(builder, rtp_packet_loss_received);
            Stats.AddProbationBytesSent(builder, probation_bytes_sent);
            Stats.AddRtxBytesSent(builder, rtx_bytes_sent);
            Stats.AddRtxBytesReceived(builder, rtx_bytes_received);
            Stats.AddRtpBytesSent(builder, rtp_bytes_sent);
            Stats.AddRtpBytesReceived(builder, rtp_bytes_received);
            Stats.AddBytesSent(builder, bytes_sent);
            Stats.AddBytesReceived(builder, bytes_received);
            Stats.AddTimestamp(builder, timestamp);
            Stats.AddMinOutgoingBitrate(builder, min_outgoing_bitrate);
            Stats.AddMaxOutgoingBitrate(builder, max_outgoing_bitrate);
            Stats.AddMaxIncomingBitrate(builder, max_incoming_bitrate);
            Stats.AddAvailableIncomingBitrate(builder, available_incoming_bitrate);
            Stats.AddAvailableOutgoingBitrate(builder, available_outgoing_bitrate);
            Stats.AddProbationSendBitrate(builder, probation_send_bitrate);
            Stats.AddRtxSendBitrate(builder, rtx_send_bitrate);
            Stats.AddRtxRecvBitrate(builder, rtx_recv_bitrate);
            Stats.AddRtpSendBitrate(builder, rtp_send_bitrate);
            Stats.AddRtpRecvBitrate(builder, rtp_recv_bitrate);
            Stats.AddSendBitrate(builder, send_bitrate);
            Stats.AddRecvBitrate(builder, recv_bitrate);
            Stats.AddTransportId(builder, transport_idOffset);
            Stats.AddSctpState(builder, sctp_state);
            return Stats.EndStats(builder);
        }

        public static void StartStats(FlatBufferBuilder builder) { builder.StartTable(24); }
        public static void AddTransportId(FlatBufferBuilder builder, StringOffset transportIdOffset) { builder.AddOffset(0, transportIdOffset.Value, 0); }
        public static void AddTimestamp(FlatBufferBuilder builder, ulong timestamp) { builder.AddUlong(1, timestamp, 0); }
        public static void AddSctpState(FlatBufferBuilder builder, FBS.SctpAssociation.SctpState? sctpState) { builder.AddByte(2, (byte?)sctpState); }
        public static void AddBytesReceived(FlatBufferBuilder builder, ulong bytesReceived) { builder.AddUlong(3, bytesReceived, 0); }
        public static void AddRecvBitrate(FlatBufferBuilder builder, uint recvBitrate) { builder.AddUint(4, recvBitrate, 0); }
        public static void AddBytesSent(FlatBufferBuilder builder, ulong bytesSent) { builder.AddUlong(5, bytesSent, 0); }
        public static void AddSendBitrate(FlatBufferBuilder builder, uint sendBitrate) { builder.AddUint(6, sendBitrate, 0); }
        public static void AddRtpBytesReceived(FlatBufferBuilder builder, ulong rtpBytesReceived) { builder.AddUlong(7, rtpBytesReceived, 0); }
        public static void AddRtpRecvBitrate(FlatBufferBuilder builder, uint rtpRecvBitrate) { builder.AddUint(8, rtpRecvBitrate, 0); }
        public static void AddRtpBytesSent(FlatBufferBuilder builder, ulong rtpBytesSent) { builder.AddUlong(9, rtpBytesSent, 0); }
        public static void AddRtpSendBitrate(FlatBufferBuilder builder, uint rtpSendBitrate) { builder.AddUint(10, rtpSendBitrate, 0); }
        public static void AddRtxBytesReceived(FlatBufferBuilder builder, ulong rtxBytesReceived) { builder.AddUlong(11, rtxBytesReceived, 0); }
        public static void AddRtxRecvBitrate(FlatBufferBuilder builder, uint rtxRecvBitrate) { builder.AddUint(12, rtxRecvBitrate, 0); }
        public static void AddRtxBytesSent(FlatBufferBuilder builder, ulong rtxBytesSent) { builder.AddUlong(13, rtxBytesSent, 0); }
        public static void AddRtxSendBitrate(FlatBufferBuilder builder, uint rtxSendBitrate) { builder.AddUint(14, rtxSendBitrate, 0); }
        public static void AddProbationBytesSent(FlatBufferBuilder builder, ulong probationBytesSent) { builder.AddUlong(15, probationBytesSent, 0); }
        public static void AddProbationSendBitrate(FlatBufferBuilder builder, uint probationSendBitrate) { builder.AddUint(16, probationSendBitrate, 0); }
        public static void AddAvailableOutgoingBitrate(FlatBufferBuilder builder, uint? availableOutgoingBitrate) { builder.AddUint(17, availableOutgoingBitrate); }
        public static void AddAvailableIncomingBitrate(FlatBufferBuilder builder, uint? availableIncomingBitrate) { builder.AddUint(18, availableIncomingBitrate); }
        public static void AddMaxIncomingBitrate(FlatBufferBuilder builder, uint? maxIncomingBitrate) { builder.AddUint(19, maxIncomingBitrate); }
        public static void AddMaxOutgoingBitrate(FlatBufferBuilder builder, uint? maxOutgoingBitrate) { builder.AddUint(20, maxOutgoingBitrate); }
        public static void AddMinOutgoingBitrate(FlatBufferBuilder builder, uint? minOutgoingBitrate) { builder.AddUint(21, minOutgoingBitrate); }
        public static void AddRtpPacketLossReceived(FlatBufferBuilder builder, double? rtpPacketLossReceived) { builder.AddDouble(22, rtpPacketLossReceived); }
        public static void AddRtpPacketLossSent(FlatBufferBuilder builder, double? rtpPacketLossSent) { builder.AddDouble(23, rtpPacketLossSent); }
        public static Offset<FBS.Transport.Stats> EndStats(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // transport_id
            return new Offset<FBS.Transport.Stats>(o);
        }
        public StatsT UnPack()
        {
            var _o = new StatsT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(StatsT _o)
        {
            _o.TransportId = this.TransportId;
            _o.Timestamp = this.Timestamp;
            _o.SctpState = this.SctpState;
            _o.BytesReceived = this.BytesReceived;
            _o.RecvBitrate = this.RecvBitrate;
            _o.BytesSent = this.BytesSent;
            _o.SendBitrate = this.SendBitrate;
            _o.RtpBytesReceived = this.RtpBytesReceived;
            _o.RtpRecvBitrate = this.RtpRecvBitrate;
            _o.RtpBytesSent = this.RtpBytesSent;
            _o.RtpSendBitrate = this.RtpSendBitrate;
            _o.RtxBytesReceived = this.RtxBytesReceived;
            _o.RtxRecvBitrate = this.RtxRecvBitrate;
            _o.RtxBytesSent = this.RtxBytesSent;
            _o.RtxSendBitrate = this.RtxSendBitrate;
            _o.ProbationBytesSent = this.ProbationBytesSent;
            _o.ProbationSendBitrate = this.ProbationSendBitrate;
            _o.AvailableOutgoingBitrate = this.AvailableOutgoingBitrate;
            _o.AvailableIncomingBitrate = this.AvailableIncomingBitrate;
            _o.MaxIncomingBitrate = this.MaxIncomingBitrate;
            _o.MaxOutgoingBitrate = this.MaxOutgoingBitrate;
            _o.MinOutgoingBitrate = this.MinOutgoingBitrate;
            _o.RtpPacketLossReceived = this.RtpPacketLossReceived;
            _o.RtpPacketLossSent = this.RtpPacketLossSent;
        }
        public static Offset<FBS.Transport.Stats> Pack(FlatBufferBuilder builder, StatsT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Transport.Stats>);
            var _transport_id = _o.TransportId == null ? default(StringOffset) : builder.CreateString(_o.TransportId);
            return CreateStats(
              builder,
              _transport_id,
              _o.Timestamp,
              _o.SctpState,
              _o.BytesReceived,
              _o.RecvBitrate,
              _o.BytesSent,
              _o.SendBitrate,
              _o.RtpBytesReceived,
              _o.RtpRecvBitrate,
              _o.RtpBytesSent,
              _o.RtpSendBitrate,
              _o.RtxBytesReceived,
              _o.RtxRecvBitrate,
              _o.RtxBytesSent,
              _o.RtxSendBitrate,
              _o.ProbationBytesSent,
              _o.ProbationSendBitrate,
              _o.AvailableOutgoingBitrate,
              _o.AvailableIncomingBitrate,
              _o.MaxIncomingBitrate,
              _o.MaxOutgoingBitrate,
              _o.MinOutgoingBitrate,
              _o.RtpPacketLossReceived,
              _o.RtpPacketLossSent);
        }
    }

    public class StatsT
    {
        [JsonPropertyName("transport_id")]
        public string TransportId { get; set; }
        [JsonPropertyName("timestamp")]
        public ulong Timestamp { get; set; }
        [JsonPropertyName("sctp_state")]
        public FBS.SctpAssociation.SctpState? SctpState { get; set; }
        [JsonPropertyName("bytes_received")]
        public ulong BytesReceived { get; set; }
        [JsonPropertyName("recv_bitrate")]
        public uint RecvBitrate { get; set; }
        [JsonPropertyName("bytes_sent")]
        public ulong BytesSent { get; set; }
        [JsonPropertyName("send_bitrate")]
        public uint SendBitrate { get; set; }
        [JsonPropertyName("rtp_bytes_received")]
        public ulong RtpBytesReceived { get; set; }
        [JsonPropertyName("rtp_recv_bitrate")]
        public uint RtpRecvBitrate { get; set; }
        [JsonPropertyName("rtp_bytes_sent")]
        public ulong RtpBytesSent { get; set; }
        [JsonPropertyName("rtp_send_bitrate")]
        public uint RtpSendBitrate { get; set; }
        [JsonPropertyName("rtx_bytes_received")]
        public ulong RtxBytesReceived { get; set; }
        [JsonPropertyName("rtx_recv_bitrate")]
        public uint RtxRecvBitrate { get; set; }
        [JsonPropertyName("rtx_bytes_sent")]
        public ulong RtxBytesSent { get; set; }
        [JsonPropertyName("rtx_send_bitrate")]
        public uint RtxSendBitrate { get; set; }
        [JsonPropertyName("probation_bytes_sent")]
        public ulong ProbationBytesSent { get; set; }
        [JsonPropertyName("probation_send_bitrate")]
        public uint ProbationSendBitrate { get; set; }
        [JsonPropertyName("available_outgoing_bitrate")]
        public uint? AvailableOutgoingBitrate { get; set; }
        [JsonPropertyName("available_incoming_bitrate")]
        public uint? AvailableIncomingBitrate { get; set; }
        [JsonPropertyName("max_incoming_bitrate")]
        public uint? MaxIncomingBitrate { get; set; }
        [JsonPropertyName("max_outgoing_bitrate")]
        public uint? MaxOutgoingBitrate { get; set; }
        [JsonPropertyName("min_outgoing_bitrate")]
        public uint? MinOutgoingBitrate { get; set; }
        [JsonPropertyName("rtp_packet_loss_received")]
        public double? RtpPacketLossReceived { get; set; }
        [JsonPropertyName("rtp_packet_loss_sent")]
        public double? RtpPacketLossSent { get; set; }

        public StatsT()
        {
            this.TransportId = null;
            this.Timestamp = 0;
            this.SctpState = null;
            this.BytesReceived = 0;
            this.RecvBitrate = 0;
            this.BytesSent = 0;
            this.SendBitrate = 0;
            this.RtpBytesReceived = 0;
            this.RtpRecvBitrate = 0;
            this.RtpBytesSent = 0;
            this.RtpSendBitrate = 0;
            this.RtxBytesReceived = 0;
            this.RtxRecvBitrate = 0;
            this.RtxBytesSent = 0;
            this.RtxSendBitrate = 0;
            this.ProbationBytesSent = 0;
            this.ProbationSendBitrate = 0;
            this.AvailableOutgoingBitrate = null;
            this.AvailableIncomingBitrate = null;
            this.MaxIncomingBitrate = null;
            this.MaxOutgoingBitrate = null;
            this.MinOutgoingBitrate = null;
            this.RtpPacketLossReceived = null;
            this.RtpPacketLossSent = null;
        }
    }
}
