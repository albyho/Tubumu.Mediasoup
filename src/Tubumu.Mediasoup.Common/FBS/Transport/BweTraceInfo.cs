// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.Transport
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct BweTraceInfo : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static BweTraceInfo GetRootAsBweTraceInfo(ByteBuffer _bb) { return GetRootAsBweTraceInfo(_bb, new BweTraceInfo()); }
        public static BweTraceInfo GetRootAsBweTraceInfo(ByteBuffer _bb, BweTraceInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public BweTraceInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Transport.BweType BweType { get { int o = __p.__offset(4); return o != 0 ? (FBS.Transport.BweType)__p.bb.Get(o + __p.bb_pos) : FBS.Transport.BweType.TRANSPORT_CC; } }
        public uint DesiredBitrate { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public uint EffectiveDesiredBitrate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public uint MinBitrate { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public uint MaxBitrate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public uint StartBitrate { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public uint MaxPaddingBitrate { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public uint AvailableBitrate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

        public static Offset<FBS.Transport.BweTraceInfo> CreateBweTraceInfo(FlatBufferBuilder builder,
            FBS.Transport.BweType bwe_type = FBS.Transport.BweType.TRANSPORT_CC,
            uint desired_bitrate = 0,
            uint effective_desired_bitrate = 0,
            uint min_bitrate = 0,
            uint max_bitrate = 0,
            uint start_bitrate = 0,
            uint max_padding_bitrate = 0,
            uint available_bitrate = 0)
        {
            builder.StartTable(8);
            BweTraceInfo.AddAvailableBitrate(builder, available_bitrate);
            BweTraceInfo.AddMaxPaddingBitrate(builder, max_padding_bitrate);
            BweTraceInfo.AddStartBitrate(builder, start_bitrate);
            BweTraceInfo.AddMaxBitrate(builder, max_bitrate);
            BweTraceInfo.AddMinBitrate(builder, min_bitrate);
            BweTraceInfo.AddEffectiveDesiredBitrate(builder, effective_desired_bitrate);
            BweTraceInfo.AddDesiredBitrate(builder, desired_bitrate);
            BweTraceInfo.AddBweType(builder, bwe_type);
            return BweTraceInfo.EndBweTraceInfo(builder);
        }

        public static void StartBweTraceInfo(FlatBufferBuilder builder) { builder.StartTable(8); }
        public static void AddBweType(FlatBufferBuilder builder, FBS.Transport.BweType bweType) { builder.AddByte(0, (byte)bweType, 0); }
        public static void AddDesiredBitrate(FlatBufferBuilder builder, uint desiredBitrate) { builder.AddUint(1, desiredBitrate, 0); }
        public static void AddEffectiveDesiredBitrate(FlatBufferBuilder builder, uint effectiveDesiredBitrate) { builder.AddUint(2, effectiveDesiredBitrate, 0); }
        public static void AddMinBitrate(FlatBufferBuilder builder, uint minBitrate) { builder.AddUint(3, minBitrate, 0); }
        public static void AddMaxBitrate(FlatBufferBuilder builder, uint maxBitrate) { builder.AddUint(4, maxBitrate, 0); }
        public static void AddStartBitrate(FlatBufferBuilder builder, uint startBitrate) { builder.AddUint(5, startBitrate, 0); }
        public static void AddMaxPaddingBitrate(FlatBufferBuilder builder, uint maxPaddingBitrate) { builder.AddUint(6, maxPaddingBitrate, 0); }
        public static void AddAvailableBitrate(FlatBufferBuilder builder, uint availableBitrate) { builder.AddUint(7, availableBitrate, 0); }
        public static Offset<FBS.Transport.BweTraceInfo> EndBweTraceInfo(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.Transport.BweTraceInfo>(o);
        }
        public BweTraceInfoT UnPack()
        {
            var _o = new BweTraceInfoT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(BweTraceInfoT _o)
        {
            _o.BweType = this.BweType;
            _o.DesiredBitrate = this.DesiredBitrate;
            _o.EffectiveDesiredBitrate = this.EffectiveDesiredBitrate;
            _o.MinBitrate = this.MinBitrate;
            _o.MaxBitrate = this.MaxBitrate;
            _o.StartBitrate = this.StartBitrate;
            _o.MaxPaddingBitrate = this.MaxPaddingBitrate;
            _o.AvailableBitrate = this.AvailableBitrate;
        }
        public static Offset<FBS.Transport.BweTraceInfo> Pack(FlatBufferBuilder builder, BweTraceInfoT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Transport.BweTraceInfo>);
            return CreateBweTraceInfo(
              builder,
              _o.BweType,
              _o.DesiredBitrate,
              _o.EffectiveDesiredBitrate,
              _o.MinBitrate,
              _o.MaxBitrate,
              _o.StartBitrate,
              _o.MaxPaddingBitrate,
              _o.AvailableBitrate);
        }
    }

    public class BweTraceInfoT
    {
        public FBS.Transport.BweType BweType { get; set; }

        public uint DesiredBitrate { get; set; }

        public uint EffectiveDesiredBitrate { get; set; }

        public uint MinBitrate { get; set; }

        public uint MaxBitrate { get; set; }

        public uint StartBitrate { get; set; }

        public uint MaxPaddingBitrate { get; set; }

        public uint AvailableBitrate { get; set; }

        public BweTraceInfoT()
        {
            this.BweType = FBS.Transport.BweType.TRANSPORT_CC;
            this.DesiredBitrate = 0;
            this.EffectiveDesiredBitrate = 0;
            this.MinBitrate = 0;
            this.MaxBitrate = 0;
            this.StartBitrate = 0;
            this.MaxPaddingBitrate = 0;
            this.AvailableBitrate = 0;
        }
    }


    static public class BweTraceInfoVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyField(tablePos, 4 /*BweType*/, 1 /*FBS.Transport.BweType*/, 1, false)
              && verifier.VerifyField(tablePos, 6 /*DesiredBitrate*/, 4 /*uint*/, 4, false)
              && verifier.VerifyField(tablePos, 8 /*EffectiveDesiredBitrate*/, 4 /*uint*/, 4, false)
              && verifier.VerifyField(tablePos, 10 /*MinBitrate*/, 4 /*uint*/, 4, false)
              && verifier.VerifyField(tablePos, 12 /*MaxBitrate*/, 4 /*uint*/, 4, false)
              && verifier.VerifyField(tablePos, 14 /*StartBitrate*/, 4 /*uint*/, 4, false)
              && verifier.VerifyField(tablePos, 16 /*MaxPaddingBitrate*/, 4 /*uint*/, 4, false)
              && verifier.VerifyField(tablePos, 18 /*AvailableBitrate*/, 4 /*uint*/, 4, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
