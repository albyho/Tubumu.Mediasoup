// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using Google.FlatBuffers;
using System.Text.Json.Serialization;

namespace FBS.Transport
{
    public struct SetMaxOutgoingBitrateRequest : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static SetMaxOutgoingBitrateRequest GetRootAsSetMaxOutgoingBitrateRequest(ByteBuffer _bb) { return GetRootAsSetMaxOutgoingBitrateRequest(_bb, new SetMaxOutgoingBitrateRequest()); }
        public static SetMaxOutgoingBitrateRequest GetRootAsSetMaxOutgoingBitrateRequest(ByteBuffer _bb, SetMaxOutgoingBitrateRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public SetMaxOutgoingBitrateRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public uint MaxOutgoingBitrate { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

        public static Offset<FBS.Transport.SetMaxOutgoingBitrateRequest> CreateSetMaxOutgoingBitrateRequest(FlatBufferBuilder builder,
            uint max_outgoing_bitrate = 0)
        {
            builder.StartTable(1);
            SetMaxOutgoingBitrateRequest.AddMaxOutgoingBitrate(builder, max_outgoing_bitrate);
            return SetMaxOutgoingBitrateRequest.EndSetMaxOutgoingBitrateRequest(builder);
        }

        public static void StartSetMaxOutgoingBitrateRequest(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddMaxOutgoingBitrate(FlatBufferBuilder builder, uint maxOutgoingBitrate) { builder.AddUint(0, maxOutgoingBitrate, 0); }
        public static Offset<FBS.Transport.SetMaxOutgoingBitrateRequest> EndSetMaxOutgoingBitrateRequest(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.Transport.SetMaxOutgoingBitrateRequest>(o);
        }
        public SetMaxOutgoingBitrateRequestT UnPack()
        {
            var _o = new SetMaxOutgoingBitrateRequestT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(SetMaxOutgoingBitrateRequestT _o)
        {
            _o.MaxOutgoingBitrate = this.MaxOutgoingBitrate;
        }
        public static Offset<FBS.Transport.SetMaxOutgoingBitrateRequest> Pack(FlatBufferBuilder builder, SetMaxOutgoingBitrateRequestT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Transport.SetMaxOutgoingBitrateRequest>);
            return CreateSetMaxOutgoingBitrateRequest(
              builder,
              _o.MaxOutgoingBitrate);
        }
    }

    public class SetMaxOutgoingBitrateRequestT
    {
        [JsonPropertyName("max_outgoing_bitrate")]
        public uint MaxOutgoingBitrate { get; set; }

        public SetMaxOutgoingBitrateRequestT()
        {
            this.MaxOutgoingBitrate = 0;
        }
    }
}
