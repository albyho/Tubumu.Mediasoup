// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.Transport
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct ProduceRequest : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static ProduceRequest GetRootAsProduceRequest(ByteBuffer _bb) { return GetRootAsProduceRequest(_bb, new ProduceRequest()); }
        public static ProduceRequest GetRootAsProduceRequest(ByteBuffer _bb, ProduceRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public ProduceRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string ProducerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProducerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetProducerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetProducerIdArray() { return __p.__vector_as_array<byte>(4); }
        public FBS.RtpParameters.MediaKind Kind { get { int o = __p.__offset(6); return o != 0 ? (FBS.RtpParameters.MediaKind)__p.bb.Get(o + __p.bb_pos) : FBS.RtpParameters.MediaKind.AUDIO; } }
        public FBS.RtpParameters.RtpParameters? RtpParameters { get { int o = __p.__offset(8); return o != 0 ? (FBS.RtpParameters.RtpParameters?)(new FBS.RtpParameters.RtpParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public FBS.RtpParameters.RtpMapping? RtpMapping { get { int o = __p.__offset(10); return o != 0 ? (FBS.RtpParameters.RtpMapping?)(new FBS.RtpParameters.RtpMapping()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public uint KeyFrameRequestDelay { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public bool Paused { get { int o = __p.__offset(14); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }

        public static Offset<FBS.Transport.ProduceRequest> CreateProduceRequest(FlatBufferBuilder builder,
            StringOffset producer_idOffset = default(StringOffset),
            FBS.RtpParameters.MediaKind kind = FBS.RtpParameters.MediaKind.AUDIO,
            Offset<FBS.RtpParameters.RtpParameters> rtp_parametersOffset = default(Offset<FBS.RtpParameters.RtpParameters>),
            Offset<FBS.RtpParameters.RtpMapping> rtp_mappingOffset = default(Offset<FBS.RtpParameters.RtpMapping>),
            uint key_frame_request_delay = 0,
            bool paused = false)
        {
            builder.StartTable(6);
            ProduceRequest.AddKeyFrameRequestDelay(builder, key_frame_request_delay);
            ProduceRequest.AddRtpMapping(builder, rtp_mappingOffset);
            ProduceRequest.AddRtpParameters(builder, rtp_parametersOffset);
            ProduceRequest.AddProducerId(builder, producer_idOffset);
            ProduceRequest.AddPaused(builder, paused);
            ProduceRequest.AddKind(builder, kind);
            return ProduceRequest.EndProduceRequest(builder);
        }

        public static void StartProduceRequest(FlatBufferBuilder builder) { builder.StartTable(6); }
        public static void AddProducerId(FlatBufferBuilder builder, StringOffset producerIdOffset) { builder.AddOffset(0, producerIdOffset.Value, 0); }
        public static void AddKind(FlatBufferBuilder builder, FBS.RtpParameters.MediaKind kind) { builder.AddByte(1, (byte)kind, 0); }
        public static void AddRtpParameters(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpParameters> rtpParametersOffset) { builder.AddOffset(2, rtpParametersOffset.Value, 0); }
        public static void AddRtpMapping(FlatBufferBuilder builder, Offset<FBS.RtpParameters.RtpMapping> rtpMappingOffset) { builder.AddOffset(3, rtpMappingOffset.Value, 0); }
        public static void AddKeyFrameRequestDelay(FlatBufferBuilder builder, uint keyFrameRequestDelay) { builder.AddUint(4, keyFrameRequestDelay, 0); }
        public static void AddPaused(FlatBufferBuilder builder, bool paused) { builder.AddBool(5, paused, false); }
        public static Offset<FBS.Transport.ProduceRequest> EndProduceRequest(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // producer_id
            builder.Required(o, 8);  // rtp_parameters
            builder.Required(o, 10);  // rtp_mapping
            return new Offset<FBS.Transport.ProduceRequest>(o);
        }
        public ProduceRequestT UnPack()
        {
            var _o = new ProduceRequestT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(ProduceRequestT _o)
        {
            _o.ProducerId = this.ProducerId;
            _o.Kind = this.Kind;
            _o.RtpParameters = this.RtpParameters.HasValue ? this.RtpParameters.Value.UnPack() : null;
            _o.RtpMapping = this.RtpMapping.HasValue ? this.RtpMapping.Value.UnPack() : null;
            _o.KeyFrameRequestDelay = this.KeyFrameRequestDelay;
            _o.Paused = this.Paused;
        }
        public static Offset<FBS.Transport.ProduceRequest> Pack(FlatBufferBuilder builder, ProduceRequestT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Transport.ProduceRequest>);
            var _producer_id = _o.ProducerId == null ? default(StringOffset) : builder.CreateString(_o.ProducerId);
            var _rtp_parameters = _o.RtpParameters == null ? default(Offset<FBS.RtpParameters.RtpParameters>) : FBS.RtpParameters.RtpParameters.Pack(builder, _o.RtpParameters);
            var _rtp_mapping = _o.RtpMapping == null ? default(Offset<FBS.RtpParameters.RtpMapping>) : FBS.RtpParameters.RtpMapping.Pack(builder, _o.RtpMapping);
            return CreateProduceRequest(
              builder,
              _producer_id,
              _o.Kind,
              _rtp_parameters,
              _rtp_mapping,
              _o.KeyFrameRequestDelay,
              _o.Paused);
        }
    }

    public class ProduceRequestT
    {
        public string ProducerId { get; set; }

        public FBS.RtpParameters.MediaKind Kind { get; set; }

        public FBS.RtpParameters.RtpParametersT RtpParameters { get; set; }

        public FBS.RtpParameters.RtpMappingT RtpMapping { get; set; }

        public uint KeyFrameRequestDelay { get; set; }

        public bool Paused { get; set; }

        public ProduceRequestT()
        {
            this.ProducerId = null;
            this.Kind = FBS.RtpParameters.MediaKind.AUDIO;
            this.RtpParameters = null;
            this.RtpMapping = null;
            this.KeyFrameRequestDelay = 0;
            this.Paused = false;
        }
    }


    static public class ProduceRequestVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyString(tablePos, 4 /*ProducerId*/, true)
              && verifier.VerifyField(tablePos, 6 /*Kind*/, 1 /*FBS.RtpParameters.MediaKind*/, 1, false)
              && verifier.VerifyTable(tablePos, 8 /*RtpParameters*/, FBS.RtpParameters.RtpParametersVerify.Verify, true)
              && verifier.VerifyTable(tablePos, 10 /*RtpMapping*/, FBS.RtpParameters.RtpMappingVerify.Verify, true)
              && verifier.VerifyField(tablePos, 12 /*KeyFrameRequestDelay*/, 4 /*uint*/, 4, false)
              && verifier.VerifyField(tablePos, 14 /*Paused*/, 1 /*bool*/, 1, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
