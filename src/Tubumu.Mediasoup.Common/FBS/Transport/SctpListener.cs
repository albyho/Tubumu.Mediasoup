// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Google.FlatBuffers;

namespace FBS.Transport
{
    public struct SctpListener : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static SctpListener GetRootAsSctpListener(ByteBuffer _bb) { return GetRootAsSctpListener(_bb, new SctpListener()); }
        public static SctpListener GetRootAsSctpListener(ByteBuffer _bb, SctpListener obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public SctpListener __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBS.Common.Uint16String? StreamIdTable(int j) { int o = __p.__offset(4); return o != 0 ? (FBS.Common.Uint16String?)(new FBS.Common.Uint16String()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int StreamIdTableLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

        public static Offset<FBS.Transport.SctpListener> CreateSctpListener(FlatBufferBuilder builder,
            VectorOffset stream_id_tableOffset = default(VectorOffset))
        {
            builder.StartTable(1);
            SctpListener.AddStreamIdTable(builder, stream_id_tableOffset);
            return SctpListener.EndSctpListener(builder);
        }

        public static void StartSctpListener(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddStreamIdTable(FlatBufferBuilder builder, VectorOffset streamIdTableOffset) { builder.AddOffset(0, streamIdTableOffset.Value, 0); }
        public static VectorOffset CreateStreamIdTableVector(FlatBufferBuilder builder, Offset<FBS.Common.Uint16String>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateStreamIdTableVectorBlock(FlatBufferBuilder builder, Offset<FBS.Common.Uint16String>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateStreamIdTableVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBS.Common.Uint16String>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateStreamIdTableVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBS.Common.Uint16String>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartStreamIdTableVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<FBS.Transport.SctpListener> EndSctpListener(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // stream_id_table
            return new Offset<FBS.Transport.SctpListener>(o);
        }
        public SctpListenerT UnPack()
        {
            var _o = new SctpListenerT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(SctpListenerT _o)
        {
            _o.StreamIdTable = new List<FBS.Common.Uint16StringT>();
            for(var _j = 0; _j < this.StreamIdTableLength; ++_j)
            { _o.StreamIdTable.Add(this.StreamIdTable(_j).HasValue ? this.StreamIdTable(_j).Value.UnPack() : null); }
        }
        public static Offset<FBS.Transport.SctpListener> Pack(FlatBufferBuilder builder, SctpListenerT _o)
        {
            if(_o == null)
                return default(Offset<FBS.Transport.SctpListener>);
            var _stream_id_table = default(VectorOffset);
            if(_o.StreamIdTable != null)
            {
                var __stream_id_table = new Offset<FBS.Common.Uint16String>[_o.StreamIdTable.Count];
                for(var _j = 0; _j < __stream_id_table.Length; ++_j)
                { __stream_id_table[_j] = FBS.Common.Uint16String.Pack(builder, _o.StreamIdTable[_j]); }
                _stream_id_table = CreateStreamIdTableVector(builder, __stream_id_table);
            }
            return CreateSctpListener(
              builder,
              _stream_id_table);
        }
    }

    public class SctpListenerT
    {
        [JsonPropertyName("stream_id_table")]
        public List<FBS.Common.Uint16StringT> StreamIdTable { get; set; }

        public SctpListenerT()
        {
            this.StreamIdTable = null;
        }
    }
}
