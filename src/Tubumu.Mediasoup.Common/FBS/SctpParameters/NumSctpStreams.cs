// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;

namespace FBS.SctpParameters
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct NumSctpStreams : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
        public static NumSctpStreams GetRootAsNumSctpStreams(ByteBuffer _bb) { return GetRootAsNumSctpStreams(_bb, new NumSctpStreams()); }
        public static NumSctpStreams GetRootAsNumSctpStreams(ByteBuffer _bb, NumSctpStreams obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public NumSctpStreams __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public ushort Os { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)1024; } }
        public ushort Mis { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)1024; } }

        public static Offset<FBS.SctpParameters.NumSctpStreams> CreateNumSctpStreams(FlatBufferBuilder builder,
            ushort os = 1024,
            ushort mis = 1024)
        {
            builder.StartTable(2);
            NumSctpStreams.AddMis(builder, mis);
            NumSctpStreams.AddOs(builder, os);
            return NumSctpStreams.EndNumSctpStreams(builder);
        }

        public static void StartNumSctpStreams(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddOs(FlatBufferBuilder builder, ushort os) { builder.AddUshort(0, os, 1024); }
        public static void AddMis(FlatBufferBuilder builder, ushort mis) { builder.AddUshort(1, mis, 1024); }
        public static Offset<FBS.SctpParameters.NumSctpStreams> EndNumSctpStreams(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBS.SctpParameters.NumSctpStreams>(o);
        }
        public NumSctpStreamsT UnPack()
        {
            var _o = new NumSctpStreamsT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(NumSctpStreamsT _o)
        {
            _o.Os = this.Os;
            _o.Mis = this.Mis;
        }
        public static Offset<FBS.SctpParameters.NumSctpStreams> Pack(FlatBufferBuilder builder, NumSctpStreamsT _o)
        {
            if(_o == null)
                return default(Offset<FBS.SctpParameters.NumSctpStreams>);
            return CreateNumSctpStreams(
              builder,
              _o.Os,
              _o.Mis);
        }
    }

    public class NumSctpStreamsT
    {
        public ushort Os { get; set; }

        public ushort Mis { get; set; }

        public NumSctpStreamsT()
        {
            this.Os = 1024;
            this.Mis = 1024;
        }
    }


    static public class NumSctpStreamsVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyField(tablePos, 4 /*Os*/, 2 /*ushort*/, 2, false)
              && verifier.VerifyField(tablePos, 6 /*Mis*/, 2 /*ushort*/, 2, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
